"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-spring";
exports.ids = ["vendor-chunks/@react-spring"];
exports.modules = {

/***/ "(ssr)/../node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs":
/*!************************************************************************************!*\
  !*** ../node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Animated: () => (/* binding */ Animated),\n/* harmony export */   AnimatedArray: () => (/* binding */ AnimatedArray),\n/* harmony export */   AnimatedObject: () => (/* binding */ AnimatedObject),\n/* harmony export */   AnimatedString: () => (/* binding */ AnimatedString),\n/* harmony export */   AnimatedValue: () => (/* binding */ AnimatedValue),\n/* harmony export */   createHost: () => (/* binding */ createHost),\n/* harmony export */   getAnimated: () => (/* binding */ getAnimated),\n/* harmony export */   getAnimatedType: () => (/* binding */ getAnimatedType),\n/* harmony export */   getPayload: () => (/* binding */ getPayload),\n/* harmony export */   isAnimated: () => (/* binding */ isAnimated),\n/* harmony export */   setAnimated: () => (/* binding */ setAnimated)\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(ssr)/../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n// src/Animated.ts\n\nvar $node = Symbol.for(\"Animated:node\");\nvar isAnimated = (value)=>!!value && value[$node] === value;\nvar getAnimated = (owner)=>owner && owner[$node];\nvar setAnimated = (owner, node)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.defineHidden)(owner, $node, node);\nvar getPayload = (owner)=>owner && owner[$node] && owner[$node].getPayload();\nvar Animated = class {\n    constructor(){\n        setAnimated(this, this);\n    }\n    /** Get every `AnimatedValue` used by this node. */ getPayload() {\n        return this.payload || [];\n    }\n};\n// src/AnimatedValue.ts\n\nvar AnimatedValue = class extends Animated {\n    constructor(_value){\n        super();\n        this._value = _value;\n        this.done = true;\n        this.durationProgress = 0;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.lastPosition = this._value;\n        }\n    }\n    /** @internal */ static create(value) {\n        return new AnimatedValue(value);\n    }\n    getPayload() {\n        return [\n            this\n        ];\n    }\n    getValue() {\n        return this._value;\n    }\n    setValue(value, step) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(value)) {\n            this.lastPosition = value;\n            if (step) {\n                value = Math.round(value / step) * step;\n                if (this.done) {\n                    this.lastPosition = value;\n                }\n            }\n        }\n        if (this._value === value) {\n            return false;\n        }\n        this._value = value;\n        return true;\n    }\n    reset() {\n        const { done } = this;\n        this.done = false;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(this._value)) {\n            this.elapsedTime = 0;\n            this.durationProgress = 0;\n            this.lastPosition = this._value;\n            if (done) this.lastVelocity = null;\n            this.v0 = null;\n        }\n    }\n};\n// src/AnimatedString.ts\n\nvar AnimatedString = class extends AnimatedValue {\n    constructor(value){\n        super(0);\n        this._string = null;\n        this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n            output: [\n                value,\n                value\n            ]\n        });\n    }\n    /** @internal */ static create(value) {\n        return new AnimatedString(value);\n    }\n    getValue() {\n        const value = this._string;\n        return value == null ? this._string = this._toString(this._value) : value;\n    }\n    setValue(value) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(value)) {\n            if (value == this._string) {\n                return false;\n            }\n            this._string = value;\n            this._value = 1;\n        } else if (super.setValue(value)) {\n            this._string = null;\n        } else {\n            return false;\n        }\n        return true;\n    }\n    reset(goal) {\n        if (goal) {\n            this._toString = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)({\n                output: [\n                    this.getValue(),\n                    goal\n                ]\n            });\n        }\n        this._value = 0;\n        super.reset();\n    }\n};\n// src/AnimatedArray.ts\n\n// src/AnimatedObject.ts\n\n// src/context.ts\nvar TreeContext = {\n    dependencies: null\n};\n// src/AnimatedObject.ts\nvar AnimatedObject = class extends Animated {\n    constructor(source){\n        super();\n        this.source = source;\n        this.setValue(source);\n    }\n    getValue(animated) {\n        const values = {};\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.source, (source, key)=>{\n            if (isAnimated(source)) {\n                values[key] = source.getValue(animated);\n            } else if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                values[key] = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(source);\n            } else if (!animated) {\n                values[key] = source;\n            }\n        });\n        return values;\n    }\n    /** Replace the raw object data */ setValue(source) {\n        this.source = source;\n        this.payload = this._makePayload(source);\n    }\n    reset() {\n        if (this.payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(this.payload, (node)=>node.reset());\n        }\n    }\n    /** Create a payload set. */ _makePayload(source) {\n        if (source) {\n            const payload = /* @__PURE__ */ new Set();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(source, this._addToPayload, payload);\n            return Array.from(payload);\n        }\n    }\n    /** Add to a payload set. */ _addToPayload(source) {\n        if (TreeContext.dependencies && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n            TreeContext.dependencies.add(source);\n        }\n        const payload = getPayload(source);\n        if (payload) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(payload, (node)=>this.add(node));\n        }\n    }\n};\n// src/AnimatedArray.ts\nvar AnimatedArray = class extends AnimatedObject {\n    constructor(source){\n        super(source);\n    }\n    /** @internal */ static create(source) {\n        return new AnimatedArray(source);\n    }\n    getValue() {\n        return this.source.map((node)=>node.getValue());\n    }\n    setValue(source) {\n        const payload = this.getPayload();\n        if (source.length == payload.length) {\n            return payload.map((node, i)=>node.setValue(source[i])).some(Boolean);\n        }\n        super.setValue(source.map(makeAnimated));\n        return true;\n    }\n};\nfunction makeAnimated(value) {\n    const nodeType = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n    return nodeType.create(value);\n}\n// src/getAnimatedType.ts\n\nfunction getAnimatedType(value) {\n    const parentNode = getAnimated(value);\n    return parentNode ? parentNode.constructor : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? AnimatedArray : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? AnimatedString : AnimatedValue;\n}\n// src/createHost.ts\n\n// src/withAnimated.tsx\n\n\n\nvar withAnimated = (Component, host)=>{\n    const hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    return /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.forwardRef)((givenProps, givenRef)=>{\n        const instanceRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n        const ref = hasInstance && // eslint-disable-next-line react-hooks/rules-of-hooks\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)((value)=>{\n            instanceRef.current = updateRef(givenRef, value);\n        }, [\n            givenRef\n        ]);\n        const [props, deps] = getAnimatedState(givenProps, host);\n        const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n        const callback = ()=>{\n            const instance = instanceRef.current;\n            if (hasInstance && !instance) {\n                return;\n            }\n            const didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false;\n            if (didUpdate === false) {\n                forceUpdate();\n            }\n        };\n        const observer = new PropsObserver(callback, deps);\n        const observerRef = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n            observerRef.current = observer;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(dep, observer));\n            return ()=>{\n                if (observerRef.current) {\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observerRef.current.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observerRef.current));\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.cancel(observerRef.current.update);\n                }\n            };\n        });\n        (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(callback, []);\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n                const observer2 = observerRef.current;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(observer2.deps, (dep)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(dep, observer2));\n            });\n        const usedProps = host.getComponentProps(props.getValue());\n        return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Component, {\n            ...usedProps,\n            ref\n        });\n    });\n};\nvar PropsObserver = class {\n    constructor(update, deps){\n        this.update = update;\n        this.deps = deps;\n    }\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.write(this.update);\n        }\n    }\n};\nfunction getAnimatedState(props, host) {\n    const dependencies = /* @__PURE__ */ new Set();\n    TreeContext.dependencies = dependencies;\n    if (props.style) props = {\n        ...props,\n        style: host.createAnimatedStyle(props.style)\n    };\n    props = new AnimatedObject(props);\n    TreeContext.dependencies = null;\n    return [\n        props,\n        dependencies\n    ];\n}\nfunction updateRef(ref, value) {\n    if (ref) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(ref)) ref(value);\n        else ref.current = value;\n    }\n    return value;\n}\n// src/createHost.ts\nvar cacheKey = Symbol.for(\"AnimatedComponent\");\nvar createHost = (components, { applyAnimatedValues = ()=>false, createAnimatedStyle = (style)=>new AnimatedObject(style), getComponentProps = (props)=>props } = {})=>{\n    const hostConfig = {\n        applyAnimatedValues,\n        createAnimatedStyle,\n        getComponentProps\n    };\n    const animated = (Component)=>{\n        const displayName = getDisplayName(Component) || \"Anonymous\";\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(Component)) {\n            Component = animated[Component] || (animated[Component] = withAnimated(Component, hostConfig));\n        } else {\n            Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n        }\n        Component.displayName = `Animated(${displayName})`;\n        return Component;\n    };\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(components, (Component, key)=>{\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(components)) {\n            key = getDisplayName(Component);\n        }\n        animated[key] = animated(Component);\n    });\n    return {\n        animated\n    };\n};\nvar getDisplayName = (arg)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg) ? arg : arg && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(arg.displayName) ? arg.displayName : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) && arg.name || null;\n //# sourceMappingURL=react-spring_animated.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@react-spring/core/dist/react-spring_core.modern.mjs":
/*!****************************************************************************!*\
  !*** ../node_modules/@react-spring/core/dist/react-spring_core.modern.mjs ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* reexport safe */ _react_spring_types__WEBPACK_IMPORTED_MODULE_3__.Any),\n/* harmony export */   BailSignal: () => (/* binding */ BailSignal),\n/* harmony export */   Controller: () => (/* binding */ Controller),\n/* harmony export */   FrameValue: () => (/* binding */ FrameValue),\n/* harmony export */   Globals: () => (/* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals),\n/* harmony export */   Interpolation: () => (/* binding */ Interpolation),\n/* harmony export */   Spring: () => (/* binding */ Spring),\n/* harmony export */   SpringContext: () => (/* binding */ SpringContext),\n/* harmony export */   SpringRef: () => (/* binding */ SpringRef),\n/* harmony export */   SpringValue: () => (/* binding */ SpringValue),\n/* harmony export */   Trail: () => (/* binding */ Trail),\n/* harmony export */   Transition: () => (/* binding */ Transition),\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   createInterpolator: () => (/* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator),\n/* harmony export */   easings: () => (/* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings),\n/* harmony export */   inferTo: () => (/* binding */ inferTo),\n/* harmony export */   interpolate: () => (/* binding */ interpolate),\n/* harmony export */   to: () => (/* binding */ to),\n/* harmony export */   update: () => (/* binding */ update),\n/* harmony export */   useChain: () => (/* binding */ useChain),\n/* harmony export */   useInView: () => (/* binding */ useInView),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect),\n/* harmony export */   useReducedMotion: () => (/* reexport safe */ _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion),\n/* harmony export */   useResize: () => (/* binding */ useResize),\n/* harmony export */   useScroll: () => (/* binding */ useScroll),\n/* harmony export */   useSpring: () => (/* binding */ useSpring),\n/* harmony export */   useSpringRef: () => (/* binding */ useSpringRef),\n/* harmony export */   useSpringValue: () => (/* binding */ useSpringValue),\n/* harmony export */   useSprings: () => (/* binding */ useSprings),\n/* harmony export */   useTrail: () => (/* binding */ useTrail),\n/* harmony export */   useTransition: () => (/* binding */ useTransition)\n/* harmony export */ });\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/shared */ \"(ssr)/../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/animated */ \"(ssr)/../node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n/* harmony import */ var _react_spring_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/types */ \"(ssr)/../node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\");\n// src/hooks/useChain.ts\n\n// src/helpers.ts\n\nfunction callProp(value, ...args) {\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(...args) : value;\n}\nvar matchProp = (value, key)=>value === true || !!(key && value && (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(value) ? value(key) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(value).includes(key)));\nvar resolveProp = (prop, key)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(prop) ? key && prop[key] : prop;\nvar getDefaultProp = (props, key)=>props.default === true ? props[key] : props.default ? props.default[key] : void 0;\nvar noopTransform = (value)=>value;\nvar getDefaultProps = (props, transform = noopTransform)=>{\n    let keys = DEFAULT_PROPS;\n    if (props.default && props.default !== true) {\n        props = props.default;\n        keys = Object.keys(props);\n    }\n    const defaults2 = {};\n    for (const key of keys){\n        const value = transform(props[key], key);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            defaults2[key] = value;\n        }\n    }\n    return defaults2;\n};\nvar DEFAULT_PROPS = [\n    \"config\",\n    \"onProps\",\n    \"onStart\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\",\n    \"onRest\"\n];\nvar RESERVED_PROPS = {\n    config: 1,\n    from: 1,\n    to: 1,\n    ref: 1,\n    loop: 1,\n    reset: 1,\n    pause: 1,\n    cancel: 1,\n    reverse: 1,\n    immediate: 1,\n    default: 1,\n    delay: 1,\n    onProps: 1,\n    onStart: 1,\n    onChange: 1,\n    onPause: 1,\n    onResume: 1,\n    onRest: 1,\n    onResolve: 1,\n    // Transition props\n    items: 1,\n    trail: 1,\n    sort: 1,\n    expires: 1,\n    initial: 1,\n    enter: 1,\n    update: 1,\n    leave: 1,\n    children: 1,\n    onDestroyed: 1,\n    // Internal props\n    keys: 1,\n    callId: 1,\n    parentId: 1\n};\nfunction getForwardProps(props) {\n    const forward = {};\n    let count = 0;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (value, prop)=>{\n        if (!RESERVED_PROPS[prop]) {\n            forward[prop] = value;\n            count++;\n        }\n    });\n    if (count) {\n        return forward;\n    }\n}\nfunction inferTo(props) {\n    const to2 = getForwardProps(props);\n    if (to2) {\n        const out = {\n            to: to2\n        };\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(props, (val, key)=>key in to2 || (out[key] = val));\n        return out;\n    }\n    return {\n        ...props\n    };\n}\nfunction computeGoal(value) {\n    value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(value);\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(value) ? value.map(computeGoal) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(value) ? _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.createStringInterpolator({\n        range: [\n            0,\n            1\n        ],\n        output: [\n            value,\n            value\n        ]\n    })(1) : value;\n}\nfunction hasProps(props) {\n    for(const _ in props)return true;\n    return false;\n}\nfunction isAsyncTo(to2) {\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2[0]);\n}\nfunction detachRefs(ctrl, ref) {\n    ctrl.ref?.delete(ctrl);\n    ref?.delete(ctrl);\n}\nfunction replaceRef(ctrl, ref) {\n    if (ref && ctrl.ref !== ref) {\n        ctrl.ref?.delete(ctrl);\n        ref.add(ctrl);\n        ctrl.ref = ref;\n    }\n}\n// src/hooks/useChain.ts\nfunction useChain(refs, timeSteps, timeFrame = 1e3) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (timeSteps) {\n            let prevDelay = 0;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref, i)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    let delay = timeFrame * timeSteps[i];\n                    if (isNaN(delay)) delay = prevDelay;\n                    else prevDelay = delay;\n                    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl)=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrl.queue, (props)=>{\n                            const memoizedDelayProp = props.delay;\n                            props.delay = (key)=>delay + callProp(memoizedDelayProp || 0, key);\n                        });\n                    });\n                    ref.start();\n                }\n            });\n        } else {\n            let p = Promise.resolve();\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(refs, (ref)=>{\n                const controllers = ref.current;\n                if (controllers.length) {\n                    const queues = controllers.map((ctrl)=>{\n                        const q = ctrl.queue;\n                        ctrl.queue = [];\n                        return q;\n                    });\n                    p = p.then(()=>{\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(controllers, (ctrl, i)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queues[i] || [], (update2)=>ctrl.queue.push(update2)));\n                        return Promise.all(ref.start());\n                    });\n                }\n            });\n        }\n    });\n}\n// src/hooks/useSpring.ts\n\n// src/hooks/useSprings.ts\n\n\n// src/SpringValue.ts\n\n\n// src/AnimationConfig.ts\n\n// src/constants.ts\nvar config = {\n    default: {\n        tension: 170,\n        friction: 26\n    },\n    gentle: {\n        tension: 120,\n        friction: 14\n    },\n    wobbly: {\n        tension: 180,\n        friction: 12\n    },\n    stiff: {\n        tension: 210,\n        friction: 20\n    },\n    slow: {\n        tension: 280,\n        friction: 60\n    },\n    molasses: {\n        tension: 280,\n        friction: 120\n    }\n};\n// src/AnimationConfig.ts\nvar defaults = {\n    ...config.default,\n    mass: 1,\n    damping: 1,\n    easing: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.easings.linear,\n    clamp: false\n};\nvar AnimationConfig = class {\n    constructor(){\n        /**\n     * The initial velocity of one or more values.\n     *\n     * @default 0\n     */ this.velocity = 0;\n        Object.assign(this, defaults);\n    }\n};\nfunction mergeConfig(config2, newConfig, defaultConfig) {\n    if (defaultConfig) {\n        defaultConfig = {\n            ...defaultConfig\n        };\n        sanitizeConfig(defaultConfig, newConfig);\n        newConfig = {\n            ...defaultConfig,\n            ...newConfig\n        };\n    }\n    sanitizeConfig(config2, newConfig);\n    Object.assign(config2, newConfig);\n    for(const key in defaults){\n        if (config2[key] == null) {\n            config2[key] = defaults[key];\n        }\n    }\n    let { frequency, damping } = config2;\n    const { mass } = config2;\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(frequency)) {\n        if (frequency < 0.01) frequency = 0.01;\n        if (damping < 0) damping = 0;\n        config2.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n        config2.friction = 4 * Math.PI * damping * mass / frequency;\n    }\n    return config2;\n}\nfunction sanitizeConfig(config2, props) {\n    if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.decay)) {\n        config2.duration = void 0;\n    } else {\n        const isTensionConfig = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.tension) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.friction);\n        if (isTensionConfig || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.frequency) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.damping) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.mass)) {\n            config2.duration = void 0;\n            config2.decay = void 0;\n        }\n        if (isTensionConfig) {\n            config2.frequency = void 0;\n        }\n    }\n}\n// src/Animation.ts\nvar emptyArray = [];\nvar Animation = class {\n    constructor(){\n        this.changed = false;\n        this.values = emptyArray;\n        this.toValues = null;\n        this.fromValues = emptyArray;\n        this.config = new AnimationConfig();\n        this.immediate = false;\n    }\n};\n// src/scheduleProps.ts\n\nfunction scheduleProps(callId, { key, props, defaultProps, state, actions }) {\n    return new Promise((resolve, reject)=>{\n        let delay;\n        let timeout;\n        let cancel = matchProp(props.cancel ?? defaultProps?.cancel, key);\n        if (cancel) {\n            onStart();\n        } else {\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.pause)) {\n                state.paused = matchProp(props.pause, key);\n            }\n            let pause = defaultProps?.pause;\n            if (pause !== true) {\n                pause = state.paused || matchProp(pause, key);\n            }\n            delay = callProp(props.delay || 0, key);\n            if (pause) {\n                state.resumeQueue.add(onResume);\n                actions.pause();\n            } else {\n                actions.resume();\n                onResume();\n            }\n        }\n        function onPause() {\n            state.resumeQueue.add(onResume);\n            state.timeouts.delete(timeout);\n            timeout.cancel();\n            delay = timeout.time - _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.now();\n        }\n        function onResume() {\n            if (delay > 0 && !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                state.delayed = true;\n                timeout = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.setTimeout(onStart, delay);\n                state.pauseQueue.add(onPause);\n                state.timeouts.add(timeout);\n            } else {\n                onStart();\n            }\n        }\n        function onStart() {\n            if (state.delayed) {\n                state.delayed = false;\n            }\n            state.pauseQueue.delete(onPause);\n            state.timeouts.delete(timeout);\n            if (callId <= (state.cancelId || 0)) {\n                cancel = true;\n            }\n            try {\n                actions.start({\n                    ...props,\n                    callId,\n                    cancel\n                }, resolve);\n            } catch (err) {\n                reject(err);\n            }\n        }\n    });\n}\n// src/runAsync.ts\n\n// src/AnimationResult.ts\nvar getCombinedResult = (target, results)=>results.length == 1 ? results[0] : results.some((result)=>result.cancelled) ? getCancelledResult(target.get()) : results.every((result)=>result.noop) ? getNoopResult(target.get()) : getFinishedResult(target.get(), results.every((result)=>result.finished));\nvar getNoopResult = (value)=>({\n        value,\n        noop: true,\n        finished: true,\n        cancelled: false\n    });\nvar getFinishedResult = (value, finished, cancelled = false)=>({\n        value,\n        finished,\n        cancelled\n    });\nvar getCancelledResult = (value)=>({\n        value,\n        cancelled: true,\n        finished: false\n    });\n// src/runAsync.ts\nfunction runAsync(to2, props, state, target) {\n    const { callId, parentId, onRest } = props;\n    const { asyncTo: prevTo, promise: prevPromise } = state;\n    if (!parentId && to2 === prevTo && !props.reset) {\n        return prevPromise;\n    }\n    return state.promise = (async ()=>{\n        state.asyncId = callId;\n        state.asyncTo = to2;\n        const defaultProps = getDefaultProps(props, (value, key)=>// The `onRest` prop is only called when the `runAsync` promise is resolved.\n            key === \"onRest\" ? void 0 : value);\n        let preventBail;\n        let bail;\n        const bailPromise = new Promise((resolve, reject)=>(preventBail = resolve, bail = reject));\n        const bailIfEnded = (bailSignal)=>{\n            const bailResult = // The `cancel` prop or `stop` method was used.\n            callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n            callId !== state.asyncId && getFinishedResult(target, false);\n            if (bailResult) {\n                bailSignal.result = bailResult;\n                bail(bailSignal);\n                throw bailSignal;\n            }\n        };\n        const animate = (arg1, arg2)=>{\n            const bailSignal = new BailSignal();\n            const skipAnimationSignal = new SkipAnimationSignal();\n            return (async ()=>{\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                    stopAsync(state);\n                    skipAnimationSignal.result = getFinishedResult(target, false);\n                    bail(skipAnimationSignal);\n                    throw skipAnimationSignal;\n                }\n                bailIfEnded(bailSignal);\n                const props2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                    ...arg1\n                } : {\n                    ...arg2,\n                    to: arg1\n                };\n                props2.parentId = callId;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(defaultProps, (value, key)=>{\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2[key])) {\n                        props2[key] = value;\n                    }\n                });\n                const result2 = await target.start(props2);\n                bailIfEnded(bailSignal);\n                if (state.paused) {\n                    await new Promise((resume)=>{\n                        state.resumeQueue.add(resume);\n                    });\n                }\n                return result2;\n            })();\n        };\n        let result;\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            stopAsync(state);\n            return getFinishedResult(target, false);\n        }\n        try {\n            let animating;\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2)) {\n                animating = (async (queue)=>{\n                    for (const props2 of queue){\n                        await animate(props2);\n                    }\n                })(to2);\n            } else {\n                animating = Promise.resolve(to2(animate, target.stop.bind(target)));\n            }\n            await Promise.all([\n                animating.then(preventBail),\n                bailPromise\n            ]);\n            result = getFinishedResult(target.get(), true, false);\n        } catch (err) {\n            if (err instanceof BailSignal) {\n                result = err.result;\n            } else if (err instanceof SkipAnimationSignal) {\n                result = err.result;\n            } else {\n                throw err;\n            }\n        } finally{\n            if (callId == state.asyncId) {\n                state.asyncId = parentId;\n                state.asyncTo = parentId ? prevTo : void 0;\n                state.promise = parentId ? prevPromise : void 0;\n            }\n        }\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(onRest)) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                onRest(result, target, target.item);\n            });\n        }\n        return result;\n    })();\n}\nfunction stopAsync(state, cancelId) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(state.timeouts, (t)=>t.cancel());\n    state.pauseQueue.clear();\n    state.resumeQueue.clear();\n    state.asyncId = state.asyncTo = state.promise = void 0;\n    if (cancelId) state.cancelId = cancelId;\n}\nvar BailSignal = class extends Error {\n    constructor(){\n        super(\"An async animation has been interrupted. You see this error because you forgot to use `await` or `.catch(...)` on its returned promise.\");\n    }\n};\nvar SkipAnimationSignal = class extends Error {\n    constructor(){\n        super(\"SkipAnimationSignal\");\n    }\n};\n// src/FrameValue.ts\n\n\nvar isFrameValue = (value)=>value instanceof FrameValue;\nvar nextId = 1;\nvar FrameValue = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.FluidValue {\n    constructor(){\n        super(...arguments);\n        this.id = nextId++;\n        this._priority = 0;\n    }\n    get priority() {\n        return this._priority;\n    }\n    set priority(priority) {\n        if (this._priority != priority) {\n            this._priority = priority;\n            this._onPriorityChange(priority);\n        }\n    }\n    /** Get the current value */ get() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node && node.getValue();\n    }\n    /** Create a spring that maps our value to another value */ to(...args) {\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    /** @deprecated Use the `to` method instead. */ interpolate(...args) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)();\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.to(this, args);\n    }\n    toJSON() {\n        return this.get();\n    }\n    observerAdded(count) {\n        if (count == 1) this._attach();\n    }\n    observerRemoved(count) {\n        if (count == 0) this._detach();\n    }\n    /** Called when the first child is added. */ _attach() {}\n    /** Called when the last child is removed. */ _detach() {}\n    /** Tell our children about our new value */ _onChange(value, idle = false) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"change\",\n            parent: this,\n            value,\n            idle\n        });\n    }\n    /** Tell our children about our new priority */ _onPriorityChange(priority) {\n        if (!this.idle) {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.sort(this);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n            type: \"priority\",\n            parent: this,\n            priority\n        });\n    }\n};\n// src/SpringPhase.ts\nvar $P = Symbol.for(\"SpringPhase\");\nvar HAS_ANIMATED = 1;\nvar IS_ANIMATING = 2;\nvar IS_PAUSED = 4;\nvar hasAnimated = (target)=>(target[$P] & HAS_ANIMATED) > 0;\nvar isAnimating = (target)=>(target[$P] & IS_ANIMATING) > 0;\nvar isPaused = (target)=>(target[$P] & IS_PAUSED) > 0;\nvar setActiveBit = (target, active)=>active ? target[$P] |= IS_ANIMATING | HAS_ANIMATED : target[$P] &= ~IS_ANIMATING;\nvar setPausedBit = (target, paused)=>paused ? target[$P] |= IS_PAUSED : target[$P] &= ~IS_PAUSED;\n// src/SpringValue.ts\nvar SpringValue = class extends FrameValue {\n    constructor(arg1, arg2){\n        super();\n        /** The animation state */ this.animation = new Animation();\n        /** Some props have customizable default values */ this.defaultProps = {};\n        /** The state for `runAsync` calls */ this._state = {\n            paused: false,\n            delayed: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The promise resolvers of pending `start` calls */ this._pendingCalls = /* @__PURE__ */ new Set();\n        /** The counter for tracking `scheduleProps` calls */ this._lastCallId = 0;\n        /** The last `scheduleProps` call that changed the `to` prop */ this._lastToId = 0;\n        this._memoizedDuration = 0;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg1) || !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(arg2)) {\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(arg1) ? {\n                ...arg1\n            } : {\n                ...arg2,\n                from: arg1\n            };\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.default)) {\n                props.default = true;\n            }\n            this.start(props);\n        }\n    }\n    /** Equals true when not advancing on each frame. */ get idle() {\n        return !(isAnimating(this) || this._state.asyncTo) || isPaused(this);\n    }\n    get goal() {\n        return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.animation.to);\n    }\n    get velocity() {\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        return node instanceof _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map((node2)=>node2.lastVelocity || 0);\n    }\n    /**\n   * When true, this value has been animated at least once.\n   */ get hasAnimated() {\n        return hasAnimated(this);\n    }\n    /**\n   * When true, this value has an unfinished animation,\n   * which is either active or paused.\n   */ get isAnimating() {\n        return isAnimating(this);\n    }\n    /**\n   * When true, all current and future animations are paused.\n   */ get isPaused() {\n        return isPaused(this);\n    }\n    /**\n   *\n   *\n   */ get isDelayed() {\n        return this._state.delayed;\n    }\n    /** Advance the current animation by a number of milliseconds */ advance(dt) {\n        let idle = true;\n        let changed = false;\n        const anim = this.animation;\n        let { toValues } = anim;\n        const { config: config2 } = anim;\n        const payload = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(anim.to);\n        if (!payload && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(anim.to)) {\n            toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        }\n        anim.values.forEach((node2, i)=>{\n            if (node2.done) return;\n            const to2 = // Animated strings always go from 0 to 1.\n            node2.constructor == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? 1 : payload ? payload[i].lastPosition : toValues[i];\n            let finished = anim.immediate;\n            let position = to2;\n            if (!finished) {\n                position = node2.lastPosition;\n                if (config2.tension <= 0) {\n                    node2.done = true;\n                    return;\n                }\n                let elapsed = node2.elapsedTime += dt;\n                const from = anim.fromValues[i];\n                const v0 = node2.v0 != null ? node2.v0 : node2.v0 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(config2.velocity) ? config2.velocity[i] : config2.velocity;\n                let velocity;\n                const precision = config2.precision || (from == to2 ? 5e-3 : Math.min(1, Math.abs(to2 - from) * 1e-3));\n                if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(config2.duration)) {\n                    let p = 1;\n                    if (config2.duration > 0) {\n                        if (this._memoizedDuration !== config2.duration) {\n                            this._memoizedDuration = config2.duration;\n                            if (node2.durationProgress > 0) {\n                                node2.elapsedTime = config2.duration * node2.durationProgress;\n                                elapsed = node2.elapsedTime += dt;\n                            }\n                        }\n                        p = (config2.progress || 0) + elapsed / this._memoizedDuration;\n                        p = p > 1 ? 1 : p < 0 ? 0 : p;\n                        node2.durationProgress = p;\n                    }\n                    position = from + config2.easing(p) * (to2 - from);\n                    velocity = (position - node2.lastPosition) / dt;\n                    finished = p == 1;\n                } else if (config2.decay) {\n                    const decay = config2.decay === true ? 0.998 : config2.decay;\n                    const e = Math.exp(-(1 - decay) * elapsed);\n                    position = from + v0 / (1 - decay) * (1 - e);\n                    finished = Math.abs(node2.lastPosition - position) <= precision;\n                    velocity = v0 * e;\n                } else {\n                    velocity = node2.lastVelocity == null ? v0 : node2.lastVelocity;\n                    const restVelocity = config2.restVelocity || precision / 10;\n                    const bounceFactor = config2.clamp ? 0 : config2.bounce;\n                    const canBounce = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(bounceFactor);\n                    const isGrowing = from == to2 ? node2.v0 > 0 : from < to2;\n                    let isMoving;\n                    let isBouncing = false;\n                    const step = 1;\n                    const numSteps = Math.ceil(dt / step);\n                    for(let n = 0; n < numSteps; ++n){\n                        isMoving = Math.abs(velocity) > restVelocity;\n                        if (!isMoving) {\n                            finished = Math.abs(to2 - position) <= precision;\n                            if (finished) {\n                                break;\n                            }\n                        }\n                        if (canBounce) {\n                            isBouncing = position == to2 || position > to2 == isGrowing;\n                            if (isBouncing) {\n                                velocity = -velocity * bounceFactor;\n                                position = to2;\n                            }\n                        }\n                        const springForce = -config2.tension * 1e-6 * (position - to2);\n                        const dampingForce = -config2.friction * 1e-3 * velocity;\n                        const acceleration = (springForce + dampingForce) / config2.mass;\n                        velocity = velocity + acceleration * step;\n                        position = position + velocity * step;\n                    }\n                }\n                node2.lastVelocity = velocity;\n                if (Number.isNaN(position)) {\n                    console.warn(`Got NaN while animating:`, this);\n                    finished = true;\n                }\n            }\n            if (payload && !payload[i].done) {\n                finished = false;\n            }\n            if (finished) {\n                node2.done = true;\n            } else {\n                idle = false;\n            }\n            if (node2.setValue(position, config2.round)) {\n                changed = true;\n            }\n        });\n        const node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        const currVal = node.getValue();\n        if (idle) {\n            const finalVal = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to);\n            if ((currVal !== finalVal || changed) && !config2.decay) {\n                node.setValue(finalVal);\n                this._onChange(finalVal);\n            } else if (changed && config2.decay) {\n                this._onChange(currVal);\n            }\n            this._stop();\n        } else if (changed) {\n            this._onChange(currVal);\n        }\n    }\n    /** Set the current value, while stopping the current animation */ set(value) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n            this._stop();\n            this._focus(value);\n            this._set(value);\n        });\n        return this;\n    }\n    /**\n   * Freeze the active animation in time, as well as any updates merged\n   * before `resume` is called.\n   */ pause() {\n        this._update({\n            pause: true\n        });\n    }\n    /** Resume the animation if paused. */ resume() {\n        this._update({\n            pause: false\n        });\n    }\n    /** Skip to the end of the current animation. */ finish() {\n        if (isAnimating(this)) {\n            const { to: to2, config: config2 } = this.animation;\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                this._onStart();\n                if (!config2.decay) {\n                    this._set(to2, false);\n                }\n                this._stop();\n            });\n        }\n        return this;\n    }\n    /** Push props into the pending queue. */ update(props) {\n        const queue = this.queue || (this.queue = []);\n        queue.push(props);\n        return this;\n    }\n    start(to2, arg2) {\n        let queue;\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            queue = [\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2 : {\n                    ...arg2,\n                    to: to2\n                }\n            ];\n        } else {\n            queue = this.queue || [];\n            this.queue = [];\n        }\n        return Promise.all(queue.map((props)=>{\n            const up = this._update(props);\n            return up;\n        })).then((results)=>getCombinedResult(this, results));\n    }\n    /**\n   * Stop the current animation, and cancel any delayed updates.\n   *\n   * Pass `true` to call `onRest` with `cancelled: true`.\n   */ stop(cancel) {\n        const { to: to2 } = this.animation;\n        this._focus(this.get());\n        stopAsync(this._state, cancel && this._lastCallId);\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this._stop(to2, cancel));\n        return this;\n    }\n    /** Restart the animation. */ reset() {\n        this._update({\n            reset: true\n        });\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._start();\n        } else if (event.type == \"priority\") {\n            this.priority = event.priority + 1;\n        }\n    }\n    /**\n   * Parse the `to` and `from` range from the given `props` object.\n   *\n   * This also ensures the initial value is available to animated components\n   * during the render phase.\n   */ _prepareNode(props) {\n        const key = this.key || \"\";\n        let { to: to2, from } = props;\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? to2[key] : to2;\n        if (to2 == null || isAsyncTo(to2)) {\n            to2 = void 0;\n        }\n        from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from) ? from[key] : from;\n        if (from == null) {\n            from = void 0;\n        }\n        const range = {\n            to: to2,\n            from\n        };\n        if (!hasAnimated(this)) {\n            if (props.reverse) [to2, from] = [\n                from,\n                to2\n            ];\n            from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from)) {\n                this._set(from);\n            } else if (!(0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this)) {\n                this._set(to2);\n            }\n        }\n        return range;\n    }\n    /** Every update is processed by this method before merging. */ _update({ ...props }, isLoop) {\n        const { key, defaultProps } = this;\n        if (props.default) Object.assign(defaultProps, getDefaultProps(props, (value, prop)=>/^on/.test(prop) ? resolveProp(value, key) : value));\n        mergeActiveFn(this, props, \"onProps\");\n        sendEvent(this, \"onProps\", props, this);\n        const range = this._prepareNode(props);\n        if (Object.isFrozen(this)) {\n            throw Error(\"Cannot animate a `SpringValue` object that is frozen. Did you forget to pass your component to `animated(...)` before animating its props?\");\n        }\n        const state = this._state;\n        return scheduleProps(++this._lastCallId, {\n            key,\n            props,\n            defaultProps,\n            state,\n            actions: {\n                pause: ()=>{\n                    if (!isPaused(this)) {\n                        setPausedBit(this, true);\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.pauseQueue);\n                        sendEvent(this, \"onPause\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                resume: ()=>{\n                    if (isPaused(this)) {\n                        setPausedBit(this, false);\n                        if (isAnimating(this)) {\n                            this._resume();\n                        }\n                        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(state.resumeQueue);\n                        sendEvent(this, \"onResume\", getFinishedResult(this, checkFinished(this, this.animation.to)), this);\n                    }\n                },\n                start: this._merge.bind(this, range)\n            }\n        }).then((result)=>{\n            if (props.loop && result.finished && !(isLoop && result.noop)) {\n                const nextProps = createLoopUpdate(props);\n                if (nextProps) {\n                    return this._update(nextProps, true);\n                }\n            }\n            return result;\n        });\n    }\n    /** Merge props into the current animation */ _merge(range, props, resolve) {\n        if (props.cancel) {\n            this.stop(true);\n            return resolve(getCancelledResult(this));\n        }\n        const hasToProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.to);\n        const hasFromProp = !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(range.from);\n        if (hasToProp || hasFromProp) {\n            if (props.callId > this._lastToId) {\n                this._lastToId = props.callId;\n            } else {\n                return resolve(getCancelledResult(this));\n            }\n        }\n        const { key, defaultProps, animation: anim } = this;\n        const { to: prevTo, from: prevFrom } = anim;\n        let { to: to2 = prevTo, from = prevFrom } = range;\n        if (hasFromProp && !hasToProp && (!props.default || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2))) {\n            to2 = from;\n        }\n        if (props.reverse) [to2, from] = [\n            from,\n            to2\n        ];\n        const hasFromChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(from, prevFrom);\n        if (hasFromChanged) {\n            anim.from = from;\n        }\n        from = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(from);\n        const hasToChanged = !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(to2, prevTo);\n        if (hasToChanged) {\n            this._focus(to2);\n        }\n        const hasAsyncTo = isAsyncTo(props.to);\n        const { config: config2 } = anim;\n        const { decay, velocity } = config2;\n        if (hasToProp || hasFromProp) {\n            config2.velocity = 0;\n        }\n        if (props.config && !hasAsyncTo) {\n            mergeConfig(config2, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n            props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n        }\n        let node = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n        if (!node || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(to2)) {\n            return resolve(getFinishedResult(this, true));\n        }\n        const reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n        // except for declarative updates. When `reset` is defined, there\n        // must exist a value to animate from.\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props.reset) ? hasFromProp && !props.default : !_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(from) && matchProp(props.reset, key);\n        const value = reset ? from : this.get();\n        const goal = computeGoal(to2);\n        const isAnimatable = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(goal) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(goal) || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isAnimatedString)(goal);\n        const immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n        if (hasToChanged) {\n            const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(to2);\n            if (nodeType !== node.constructor) {\n                if (immediate) {\n                    node = this._set(goal);\n                } else throw Error(`Cannot animate between ${node.constructor.name} and ${nodeType.name}, as the \"to\" prop suggests`);\n            }\n        }\n        const goalType = node.constructor;\n        let started = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2);\n        let finished = false;\n        if (!started) {\n            const hasValueChanged = reset || !hasAnimated(this) && hasFromChanged;\n            if (hasToChanged || hasValueChanged) {\n                finished = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(computeGoal(value), goal);\n                started = !finished;\n            }\n            if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(anim.immediate, immediate) && !immediate || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.decay, decay) || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(config2.velocity, velocity)) {\n                started = true;\n            }\n        }\n        if (finished && isAnimating(this)) {\n            if (anim.changed && !reset) {\n                started = true;\n            } else if (!started) {\n                this._stop(prevTo);\n            }\n        }\n        if (!hasAsyncTo) {\n            if (started || (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(prevTo)) {\n                anim.values = node.getPayload();\n                anim.toValues = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2) ? null : goalType == _react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.AnimatedString ? [\n                    1\n                ] : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(goal);\n            }\n            if (anim.immediate != immediate) {\n                anim.immediate = immediate;\n                if (!immediate && !reset) {\n                    this._set(prevTo);\n                }\n            }\n            if (started) {\n                const { onRest } = anim;\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ACTIVE_EVENTS, (type)=>mergeActiveFn(this, props, type));\n                const result = getFinishedResult(this, checkFinished(this, prevTo));\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n                this._pendingCalls.add(resolve);\n                if (anim.changed) _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                    anim.changed = !reset;\n                    onRest?.(result, this);\n                    if (reset) {\n                        callProp(defaultProps.onRest, result);\n                    } else {\n                        anim.onStart?.(result, this);\n                    }\n                });\n            }\n        }\n        if (reset) {\n            this._set(value);\n        }\n        if (hasAsyncTo) {\n            resolve(runAsync(props.to, props, this._state, this));\n        } else if (started) {\n            this._start();\n        } else if (isAnimating(this) && !hasToChanged) {\n            this._pendingCalls.add(resolve);\n        } else {\n            resolve(getNoopResult(value));\n        }\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */ _focus(value) {\n        const anim = this.animation;\n        if (value !== anim.to) {\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._detach();\n            }\n            anim.to = value;\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidObservers)(this)) {\n                this._attach();\n            }\n        }\n    }\n    _attach() {\n        let priority = 0;\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(to2, this);\n            if (isFrameValue(to2)) {\n                priority = to2.priority + 1;\n            }\n        }\n        this.priority = priority;\n    }\n    _detach() {\n        const { to: to2 } = this.animation;\n        if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(to2)) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(to2, this);\n        }\n    }\n    /**\n   * Update the current value from outside the frameloop,\n   * and return the `Animated` node.\n   */ _set(arg, idle = true) {\n        const value = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(arg);\n        if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n            const oldNode = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n            if (!oldNode || !(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldNode.getValue())) {\n                const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n                if (!oldNode || oldNode.constructor != nodeType) {\n                    (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n                } else {\n                    oldNode.setValue(value);\n                }\n                if (oldNode) {\n                    _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>{\n                        this._onChange(value, idle);\n                    });\n                }\n            }\n        }\n        return (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this);\n    }\n    _onStart() {\n        const anim = this.animation;\n        if (!anim.changed) {\n            anim.changed = true;\n            sendEvent(this, \"onStart\", getFinishedResult(this, checkFinished(this, anim.to)), this);\n        }\n    }\n    _onChange(value, idle) {\n        if (!idle) {\n            this._onStart();\n            callProp(this.animation.onChange, value, this);\n        }\n        callProp(this.defaultProps.onChange, value, this);\n        super._onChange(value, idle);\n    }\n    // This method resets the animation state (even if already animating) to\n    // ensure the latest from/to range is used, and it also ensures this spring\n    // is added to the frameloop.\n    _start() {\n        const anim = this.animation;\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).reset((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(anim.to));\n        if (!anim.immediate) {\n            anim.fromValues = anim.values.map((node)=>node.lastPosition);\n        }\n        if (!isAnimating(this)) {\n            setActiveBit(this, true);\n            if (!isPaused(this)) {\n                this._resume();\n            }\n        }\n    }\n    _resume() {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n            this.finish();\n        } else {\n            _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n        }\n    }\n    /**\n   * Exit the frameloop and notify `onRest` listeners.\n   *\n   * Always wrap `_stop` calls with `batchedUpdates`.\n   */ _stop(goal, cancel) {\n        if (isAnimating(this)) {\n            setActiveBit(this, false);\n            const anim = this.animation;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(anim.values, (node)=>{\n                node.done = true;\n            });\n            if (anim.toValues) {\n                anim.onChange = anim.onPause = anim.onResume = void 0;\n            }\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(this, {\n                type: \"idle\",\n                parent: this\n            });\n            const result = cancel ? getCancelledResult(this.get()) : getFinishedResult(this.get(), checkFinished(this, goal ?? anim.to));\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(this._pendingCalls, result);\n            if (anim.changed) {\n                anim.changed = false;\n                sendEvent(this, \"onRest\", result, this);\n            }\n        }\n    }\n};\nfunction checkFinished(target, to2) {\n    const goal = computeGoal(to2);\n    const value = computeGoal(target.get());\n    return (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, goal);\n}\nfunction createLoopUpdate(props, loop = props.loop, to2 = props.to) {\n    const loopRet = callProp(loop);\n    if (loopRet) {\n        const overrides = loopRet !== true && inferTo(loopRet);\n        const reverse = (overrides || props).reverse;\n        const reset = !overrides || overrides.reset;\n        return createUpdate({\n            ...props,\n            loop,\n            // Avoid updating default props when looping.\n            default: false,\n            // Never loop the `pause` prop.\n            pause: void 0,\n            // For the \"reverse\" prop to loop as expected, the \"to\" prop\n            // must be undefined. The \"reverse\" prop is ignored when the\n            // \"to\" prop is an array or function.\n            to: !reverse || isAsyncTo(to2) ? to2 : void 0,\n            // Ignore the \"from\" prop except on reset.\n            from: reset ? props.from : void 0,\n            reset,\n            // The \"loop\" prop can return a \"useSpring\" props object to\n            // override any of the original props.\n            ...overrides\n        });\n    }\n}\nfunction createUpdate(props) {\n    const { to: to2, from } = props = inferTo(props);\n    const keys = /* @__PURE__ */ new Set();\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2)) findDefined(to2, keys);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(from)) findDefined(from, keys);\n    props.keys = keys.size ? Array.from(keys) : null;\n    return props;\n}\nfunction declareUpdate(props) {\n    const update2 = createUpdate(props);\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(update2.default)) {\n        update2.default = getDefaultProps(update2);\n    }\n    return update2;\n}\nfunction findDefined(values, keys) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(values, (value, key)=>value != null && keys.add(key));\n}\nvar ACTIVE_EVENTS = [\n    \"onStart\",\n    \"onRest\",\n    \"onChange\",\n    \"onPause\",\n    \"onResume\"\n];\nfunction mergeActiveFn(target, props, type) {\n    target.animation[type] = props[type] !== getDefaultProp(props, type) ? resolveProp(props[type], target.key) : void 0;\n}\nfunction sendEvent(target, type, ...args) {\n    target.animation[type]?.(...args);\n    target.defaultProps[type]?.(...args);\n}\n// src/Controller.ts\n\nvar BATCHED_EVENTS = [\n    \"onStart\",\n    \"onChange\",\n    \"onRest\"\n];\nvar nextId2 = 1;\nvar Controller = class {\n    constructor(props, flush3){\n        this.id = nextId2++;\n        /** The animated values */ this.springs = {};\n        /** The queue of props passed to the `update` method. */ this.queue = [];\n        /** The counter for tracking `scheduleProps` calls */ this._lastAsyncId = 0;\n        /** The values currently being animated */ this._active = /* @__PURE__ */ new Set();\n        /** The values that changed recently */ this._changed = /* @__PURE__ */ new Set();\n        /** Equals false when `onStart` listeners can be called */ this._started = false;\n        /** State used by the `runAsync` function */ this._state = {\n            paused: false,\n            pauseQueue: /* @__PURE__ */ new Set(),\n            resumeQueue: /* @__PURE__ */ new Set(),\n            timeouts: /* @__PURE__ */ new Set()\n        };\n        /** The event queues that are flushed once per frame maximum */ this._events = {\n            onStart: /* @__PURE__ */ new Map(),\n            onChange: /* @__PURE__ */ new Map(),\n            onRest: /* @__PURE__ */ new Map()\n        };\n        this._onFrame = this._onFrame.bind(this);\n        if (flush3) {\n            this._flush = flush3;\n        }\n        if (props) {\n            this.start({\n                default: true,\n                ...props\n            });\n        }\n    }\n    /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */ get idle() {\n        return !this._state.asyncTo && Object.values(this.springs).every((spring)=>{\n            return spring.idle && !spring.isDelayed && !spring.isPaused;\n        });\n    }\n    get item() {\n        return this._item;\n    }\n    set item(item) {\n        this._item = item;\n    }\n    /** Get the current values of our springs */ get() {\n        const values = {};\n        this.each((spring, key)=>values[key] = spring.get());\n        return values;\n    }\n    /** Set the current values without animating. */ set(values) {\n        for(const key in values){\n            const value = values[key];\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(value)) {\n                this.springs[key].set(value);\n            }\n        }\n    }\n    /** Push an update onto the queue of each value. */ update(props) {\n        if (props) {\n            this.queue.push(createUpdate(props));\n        }\n        return this;\n    }\n    /**\n   * Start the queued animations for every spring, and resolve the returned\n   * promise once all queued animations have finished or been cancelled.\n   *\n   * When you pass a queue (instead of nothing), that queue is used instead of\n   * the queued animations added with the `update` method, which are left alone.\n   */ start(props) {\n        let { queue } = this;\n        if (props) {\n            queue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props).map(createUpdate);\n        } else {\n            this.queue = [];\n        }\n        if (this._flush) {\n            return this._flush(this, queue);\n        }\n        prepareKeys(this, queue);\n        return flushUpdateQueue(this, queue);\n    }\n    /** @internal */ stop(arg, keys) {\n        if (arg !== !!arg) {\n            keys = arg;\n        }\n        if (keys) {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].stop(!!arg));\n        } else {\n            stopAsync(this._state, this._lastAsyncId);\n            this.each((spring)=>spring.stop(!!arg));\n        }\n        return this;\n    }\n    /** Freeze the active animation in time */ pause(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: true\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].pause());\n        }\n        return this;\n    }\n    /** Resume the animation if paused. */ resume(keys) {\n        if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys)) {\n            this.start({\n                pause: false\n            });\n        } else {\n            const springs = this.springs;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys), (key)=>springs[key].resume());\n        }\n        return this;\n    }\n    /** Call a function once per spring value */ each(iterator) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(this.springs, iterator);\n    }\n    /** @internal Called at the end of every animation frame */ _onFrame() {\n        const { onStart, onChange, onRest } = this._events;\n        const active = this._active.size > 0;\n        const changed = this._changed.size > 0;\n        if (active && !this._started || changed && !this._started) {\n            this._started = true;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onStart, ([onStart2, result])=>{\n                result.value = this.get();\n                onStart2(result, this, this._item);\n            });\n        }\n        const idle = !active && this._started;\n        const values = changed || idle && onRest.size ? this.get() : null;\n        if (changed && onChange.size) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onChange, ([onChange2, result])=>{\n                result.value = values;\n                onChange2(result, this, this._item);\n            });\n        }\n        if (idle) {\n            this._started = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flush)(onRest, ([onRest2, result])=>{\n                result.value = values;\n                onRest2(result, this, this._item);\n            });\n        }\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            this._changed.add(event.parent);\n            if (!event.idle) {\n                this._active.add(event.parent);\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else return;\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.onFrame(this._onFrame);\n    }\n};\nfunction flushUpdateQueue(ctrl, queue) {\n    return Promise.all(queue.map((props)=>flushUpdate(ctrl, props))).then((results)=>getCombinedResult(ctrl, results));\n}\nasync function flushUpdate(ctrl, props, isLoop) {\n    const { keys, to: to2, from, loop, onRest, onResolve } = props;\n    const defaults2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props.default) && props.default;\n    if (loop) {\n        props.loop = false;\n    }\n    if (to2 === false) props.to = null;\n    if (from === false) props.from = null;\n    const asyncTo = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(to2) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(to2) ? to2 : void 0;\n    if (asyncTo) {\n        props.to = void 0;\n        props.onRest = void 0;\n        if (defaults2) {\n            defaults2.onRest = void 0;\n        }\n    } else {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(BATCHED_EVENTS, (key)=>{\n            const handler = props[key];\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(handler)) {\n                const queue = ctrl[\"_events\"][key];\n                props[key] = ({ finished, cancelled })=>{\n                    const result2 = queue.get(handler);\n                    if (result2) {\n                        if (!finished) result2.finished = false;\n                        if (cancelled) result2.cancelled = true;\n                    } else {\n                        queue.set(handler, {\n                            value: null,\n                            finished: finished || false,\n                            cancelled: cancelled || false\n                        });\n                    }\n                };\n                if (defaults2) {\n                    defaults2[key] = props[key];\n                }\n            }\n        });\n    }\n    const state = ctrl[\"_state\"];\n    if (props.pause === !state.paused) {\n        state.paused = props.pause;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.flushCalls)(props.pause ? state.pauseQueue : state.resumeQueue);\n    } else if (state.paused) {\n        props.pause = true;\n    }\n    const promises = (keys || Object.keys(ctrl.springs)).map((key)=>ctrl.springs[key].start(props));\n    const cancel = props.cancel === true || getDefaultProp(props, \"cancel\") === true;\n    if (asyncTo || cancel && state.asyncId) {\n        promises.push(scheduleProps(++ctrl[\"_lastAsyncId\"], {\n            props,\n            state,\n            actions: {\n                pause: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                resume: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.noop,\n                start (props2, resolve) {\n                    if (cancel) {\n                        stopAsync(state, ctrl[\"_lastAsyncId\"]);\n                        resolve(getCancelledResult(ctrl));\n                    } else {\n                        props2.onRest = onRest;\n                        resolve(runAsync(asyncTo, props2, state, ctrl));\n                    }\n                }\n            }\n        }));\n    }\n    if (state.paused) {\n        await new Promise((resume)=>{\n            state.resumeQueue.add(resume);\n        });\n    }\n    const result = getCombinedResult(ctrl, await Promise.all(promises));\n    if (loop && result.finished && !(isLoop && result.noop)) {\n        const nextProps = createLoopUpdate(props, loop, to2);\n        if (nextProps) {\n            prepareKeys(ctrl, [\n                nextProps\n            ]);\n            return flushUpdate(ctrl, nextProps, true);\n        }\n    }\n    if (onResolve) {\n        _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>onResolve(result, ctrl, ctrl.item));\n    }\n    return result;\n}\nfunction getSprings(ctrl, props) {\n    const springs = {\n        ...ctrl.springs\n    };\n    if (props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(props), (props2)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props2.keys)) {\n                props2 = createUpdate(props2);\n            }\n            if (!_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(props2.to)) {\n                props2 = {\n                    ...props2,\n                    to: void 0\n                };\n            }\n            prepareSprings(springs, props2, (key)=>{\n                return createSpring(key);\n            });\n        });\n    }\n    setSprings(ctrl, springs);\n    return springs;\n}\nfunction setSprings(ctrl, springs) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.eachProp)(springs, (spring, key)=>{\n        if (!ctrl.springs[key]) {\n            ctrl.springs[key] = spring;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, ctrl);\n        }\n    });\n}\nfunction createSpring(key, observer) {\n    const spring = new SpringValue();\n    spring.key = key;\n    if (observer) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(spring, observer);\n    }\n    return spring;\n}\nfunction prepareSprings(springs, props, create) {\n    if (props.keys) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(props.keys, (key)=>{\n            const spring = springs[key] || (springs[key] = create(key));\n            spring[\"_prepareNode\"](props);\n        });\n    }\n}\nfunction prepareKeys(ctrl, queue) {\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (props)=>{\n        prepareSprings(ctrl.springs, props, (key)=>{\n            return createSpring(key, ctrl);\n        });\n    });\n}\n// src/SpringContext.tsx\n\n\n\nvar SpringContext = ({ children, ...props })=>{\n    const inherited = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(ctx);\n    const pause = props.pause || !!inherited.pause, immediate = props.immediate || !!inherited.immediate;\n    props = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useMemoOne)(()=>({\n            pause,\n            immediate\n        }), [\n        pause,\n        immediate\n    ]);\n    const { Provider } = ctx;\n    return /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(Provider, {\n        value: props\n    }, children);\n};\nvar ctx = makeContext(SpringContext, {});\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\nfunction makeContext(target, init) {\n    Object.assign(target, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createContext(init));\n    target.Provider._context = target;\n    target.Consumer._context = target;\n    return target;\n}\n// src/SpringRef.ts\n\nvar SpringRef = ()=>{\n    const current = [];\n    const SpringRef2 = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateDirectCall)();\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = _getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.current = current;\n    SpringRef2.add = function(ctrl) {\n        if (!current.includes(ctrl)) {\n            current.push(ctrl);\n        }\n    };\n    SpringRef2.delete = function(ctrl) {\n        const i = current.indexOf(ctrl);\n        if (~i) current.splice(i, 1);\n    };\n    SpringRef2.pause = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.pause(...arguments));\n        return this;\n    };\n    SpringRef2.resume = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.resume(...arguments));\n        return this;\n    };\n    SpringRef2.set = function(values) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            const update2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(values) ? values(i, ctrl) : values;\n            if (update2) {\n                ctrl.set(update2);\n            }\n        });\n    };\n    SpringRef2.start = function(props) {\n        const results = [];\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>{\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(props)) {\n                results.push(ctrl.start());\n            } else {\n                const update2 = this._getProps(props, ctrl, i);\n                if (update2) {\n                    results.push(ctrl.start(update2));\n                }\n            }\n        });\n        return results;\n    };\n    SpringRef2.stop = function() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl)=>ctrl.stop(...arguments));\n        return this;\n    };\n    SpringRef2.update = function(props) {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(current, (ctrl, i)=>ctrl.update(this._getProps(props, ctrl, i)));\n        return this;\n    };\n    const _getProps = function(arg, ctrl, index) {\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(arg) ? arg(index, ctrl) : arg;\n    };\n    SpringRef2._getProps = _getProps;\n    return SpringRef2;\n};\n// src/hooks/useSprings.ts\nfunction useSprings(length, props, deps) {\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    if (propsFn && !deps) deps = [];\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const layoutId = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(0);\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const state = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>({\n            ctrls: [],\n            queue: [],\n            flush (ctrl, updates2) {\n                const springs2 = getSprings(ctrl, updates2);\n                const canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs2).some((key)=>!ctrl.springs[key]);\n                return canFlushSync ? flushUpdateQueue(ctrl, updates2) : new Promise((resolve)=>{\n                    setSprings(ctrl, springs2);\n                    state.queue.push(()=>{\n                        resolve(flushUpdateQueue(ctrl, updates2));\n                    });\n                    forceUpdate();\n                });\n            }\n        }), []);\n    const ctrls = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)([\n        ...state.ctrls\n    ]);\n    const updates = [];\n    const prevLength = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(length) || 0;\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current.slice(length, prevLength), (ctrl)=>{\n            detachRefs(ctrl, ref);\n            ctrl.stop(true);\n        });\n        ctrls.current.length = length;\n        declareUpdates(prevLength, length);\n    }, [\n        length\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>{\n        declareUpdates(0, Math.min(prevLength, length));\n    }, deps);\n    function declareUpdates(startIndex, endIndex) {\n        for(let i = startIndex; i < endIndex; i++){\n            const ctrl = ctrls.current[i] || (ctrls.current[i] = new Controller(null, state.flush));\n            const update2 = propsFn ? propsFn(i, ctrl) : props[i];\n            if (update2) {\n                updates[i] = declareUpdate(update2);\n            }\n        }\n    }\n    const springs = ctrls.current.map((ctrl, i)=>getSprings(ctrl, updates[i]));\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        layoutId.current++;\n        state.ctrls = ctrls.current;\n        const { queue } = state;\n        if (queue.length) {\n            state.queue = [];\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(queue, (cb)=>cb());\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(ctrls.current, (ctrl, i)=>{\n            ref?.add(ctrl);\n            if (hasContext) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            const update2 = updates[i];\n            if (update2) {\n                replaceRef(ctrl, update2.ref);\n                if (ctrl.ref) {\n                    ctrl.queue.push(update2);\n                } else {\n                    ctrl.start(update2);\n                }\n            }\n        });\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(state.ctrls, (ctrl)=>ctrl.stop(true));\n        });\n    const values = springs.map((x)=>({\n            ...x\n        }));\n    return ref ? [\n        values,\n        ref\n    ] : values;\n}\n// src/hooks/useSpring.ts\nfunction useSpring(props, deps) {\n    const isFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props);\n    const [[values], ref] = useSprings(1, isFn ? props : [\n        props\n    ], isFn ? deps || [] : deps);\n    return isFn || arguments.length == 2 ? [\n        values,\n        ref\n    ] : values;\n}\n// src/hooks/useSpringRef.ts\n\nvar initSpringRef = ()=>SpringRef();\nvar useSpringRef = ()=>(0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(initSpringRef)[0];\n// src/hooks/useSpringValue.ts\n\nvar useSpringValue = (initial, props)=>{\n    const springValue = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useConstant)(()=>new SpringValue(initial, props));\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>()=>{\n            springValue.stop();\n        });\n    return springValue;\n};\n// src/hooks/useTrail.ts\n\nfunction useTrail(length, propsArg, deps) {\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg) && propsArg;\n    if (propsFn && !deps) deps = [];\n    let reverse = true;\n    let passedRef = void 0;\n    const result = useSprings(length, (i, ctrl)=>{\n        const props = propsFn ? propsFn(i, ctrl) : propsArg;\n        passedRef = props.ref;\n        reverse = reverse && props.reverse;\n        return props;\n    }, // Ensure the props function is called when no deps exist.\n    // This works around the 3 argument rule.\n    deps || [\n        {}\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(result[1].current, (ctrl, i)=>{\n            const parent = result[1].current[i + (reverse ? 1 : -1)];\n            replaceRef(ctrl, passedRef);\n            if (ctrl.ref) {\n                if (parent) {\n                    ctrl.update({\n                        to: parent.springs\n                    });\n                }\n                return;\n            }\n            if (parent) {\n                ctrl.start({\n                    to: parent.springs\n                });\n            } else {\n                ctrl.start();\n            }\n        });\n    }, deps);\n    if (propsFn || arguments.length == 3) {\n        const ref = passedRef ?? result[1];\n        ref[\"_getProps\"] = (propsArg2, ctrl, i)=>{\n            const props = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(propsArg2) ? propsArg2(i, ctrl) : propsArg2;\n            if (props) {\n                const parent = ref.current[i + (props.reverse ? 1 : -1)];\n                if (parent) props.to = parent.springs;\n                return props;\n            }\n        };\n        return result;\n    }\n    return result[0];\n}\n// src/hooks/useTransition.tsx\n\n\n\nfunction useTransition(data, props, deps) {\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const { reset, sort, trail = 0, expires = true, exitBeforeEnter = false, onDestroyed, ref: propsRef, config: propsConfig } = propsFn ? propsFn() : props;\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useMemo)(()=>propsFn || arguments.length == 3 ? SpringRef() : void 0, []);\n    const items = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(data);\n    const transitions = [];\n    const usedTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(null);\n    const prevTransitions = reset ? null : usedTransitions.current;\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        usedTransitions.current = transitions;\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useOnce)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n            ref?.add(t.ctrl);\n            t.ctrl.ref = ref;\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(usedTransitions.current, (t)=>{\n                if (t.expired) {\n                    clearTimeout(t.expirationId);\n                }\n                detachRefs(t.ctrl, ref);\n                t.ctrl.stop(true);\n            });\n        };\n    });\n    const keys = getKeys(items, propsFn ? propsFn() : props, prevTransitions);\n    const expired = reset && usedTransitions.current || [];\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(expired, ({ ctrl, item, key })=>{\n            detachRefs(ctrl, ref);\n            callProp(onDestroyed, item, key);\n        }));\n    const reused = [];\n    if (prevTransitions) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(prevTransitions, (t, i)=>{\n        if (t.expired) {\n            clearTimeout(t.expirationId);\n            expired.push(t);\n        } else {\n            i = reused[i] = keys.indexOf(t.key);\n            if (~i) transitions[i] = t;\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(items, (item, i)=>{\n        if (!transitions[i]) {\n            transitions[i] = {\n                key: keys[i],\n                item,\n                phase: \"mount\" /* MOUNT */ ,\n                ctrl: new Controller()\n            };\n            transitions[i].ctrl.item = item;\n        }\n    });\n    if (reused.length) {\n        let i = -1;\n        const { leave } = propsFn ? propsFn() : props;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(reused, (keyIndex, prevIndex)=>{\n            const t = prevTransitions[prevIndex];\n            if (~keyIndex) {\n                i = transitions.indexOf(t);\n                transitions[i] = {\n                    ...t,\n                    item: items[keyIndex]\n                };\n            } else if (leave) {\n                transitions.splice(++i, 0, t);\n            }\n        });\n    }\n    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(sort)) {\n        transitions.sort((a, b)=>sort(a.item, b.item));\n    }\n    let delay = -trail;\n    const forceUpdate = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useForceUpdate)();\n    const defaultProps = getDefaultProps(props);\n    const changes = /* @__PURE__ */ new Map();\n    const exitingTransitions = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(/* @__PURE__ */ new Map());\n    const forceChange = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)(false);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t, i)=>{\n        const key = t.key;\n        const prevPhase = t.phase;\n        const p = propsFn ? propsFn() : props;\n        let to2;\n        let phase;\n        const propsDelay = callProp(p.delay || 0, key);\n        if (prevPhase == \"mount\" /* MOUNT */ ) {\n            to2 = p.enter;\n            phase = \"enter\" /* ENTER */ ;\n        } else {\n            const isLeave = keys.indexOf(key) < 0;\n            if (prevPhase != \"leave\" /* LEAVE */ ) {\n                if (isLeave) {\n                    to2 = p.leave;\n                    phase = \"leave\" /* LEAVE */ ;\n                } else if (to2 = p.update) {\n                    phase = \"update\" /* UPDATE */ ;\n                } else return;\n            } else if (!isLeave) {\n                to2 = p.enter;\n                phase = \"enter\" /* ENTER */ ;\n            } else return;\n        }\n        to2 = callProp(to2, t.item, i);\n        to2 = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.obj(to2) ? inferTo(to2) : {\n            to: to2\n        };\n        if (!to2.config) {\n            const config2 = propsConfig || defaultProps.config;\n            to2.config = callProp(config2, t.item, i, phase);\n        }\n        delay += trail;\n        const payload = {\n            ...defaultProps,\n            // we need to add our props.delay value you here.\n            delay: propsDelay + delay,\n            ref: propsRef,\n            immediate: p.immediate,\n            // This prevents implied resets.\n            reset: false,\n            // Merge any phase-specific props.\n            ...to2\n        };\n        if (phase == \"enter\" /* ENTER */  && _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(payload.from)) {\n            const p2 = propsFn ? propsFn() : props;\n            const from = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(p2.initial) || prevTransitions ? p2.from : p2.initial;\n            payload.from = callProp(from, t.item, i);\n        }\n        const { onResolve } = payload;\n        payload.onResolve = (result)=>{\n            callProp(onResolve, result);\n            const transitions2 = usedTransitions.current;\n            const t2 = transitions2.find((t3)=>t3.key === key);\n            if (!t2) return;\n            if (result.cancelled && t2.phase != \"update\" /* UPDATE */ ) {\n                return;\n            }\n            if (t2.ctrl.idle) {\n                const idle = transitions2.every((t3)=>t3.ctrl.idle);\n                if (t2.phase == \"leave\" /* LEAVE */ ) {\n                    const expiry = callProp(expires, t2.item);\n                    if (expiry !== false) {\n                        const expiryMs = expiry === true ? 0 : expiry;\n                        t2.expired = true;\n                        if (!idle && expiryMs > 0) {\n                            if (expiryMs <= 2147483647) t2.expirationId = setTimeout(forceUpdate, expiryMs);\n                            return;\n                        }\n                    }\n                }\n                if (idle && transitions2.some((t3)=>t3.expired)) {\n                    exitingTransitions.current.delete(t2);\n                    if (exitBeforeEnter) {\n                        forceChange.current = true;\n                    }\n                    forceUpdate();\n                }\n            }\n        };\n        const springs = getSprings(t.ctrl, payload);\n        if (phase === \"leave\" /* LEAVE */  && exitBeforeEnter) {\n            exitingTransitions.current.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        } else {\n            changes.set(t, {\n                phase,\n                springs,\n                payload\n            });\n        }\n    });\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(SpringContext);\n    const prevContext = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.usePrev)(context);\n    const hasContext = context !== prevContext && hasProps(context);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        if (hasContext) {\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(transitions, (t)=>{\n                t.ctrl.start({\n                    default: context\n                });\n            });\n        }\n    }, [\n        context\n    ]);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(changes, (_, t)=>{\n        if (exitingTransitions.current.size) {\n            const ind = transitions.findIndex((state)=>state.key === t.key);\n            transitions.splice(ind, 1);\n        }\n    });\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(exitingTransitions.current.size ? exitingTransitions.current : changes, ({ phase, payload }, t)=>{\n            const { ctrl } = t;\n            t.phase = phase;\n            ref?.add(ctrl);\n            if (hasContext && phase == \"enter\" /* ENTER */ ) {\n                ctrl.start({\n                    default: context\n                });\n            }\n            if (payload) {\n                replaceRef(ctrl, payload.ref);\n                if ((ctrl.ref || ref) && !forceChange.current) {\n                    ctrl.update(payload);\n                } else {\n                    ctrl.start(payload);\n                    if (forceChange.current) {\n                        forceChange.current = false;\n                    }\n                }\n            }\n        });\n    }, reset ? void 0 : deps);\n    const renderTransitions = (render)=>/* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(react__WEBPACK_IMPORTED_MODULE_1__.Fragment, null, transitions.map((t, i)=>{\n            const { springs } = changes.get(t) || t.ctrl;\n            const elem = render({\n                ...springs\n            }, t.item, t, i);\n            return elem && elem.type ? /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(elem.type, {\n                ...elem.props,\n                key: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.str(t.key) || _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.num(t.key) ? t.key : t.ctrl.id,\n                ref: elem.ref\n            }) : elem;\n        }));\n    return ref ? [\n        renderTransitions,\n        ref\n    ] : renderTransitions;\n}\nvar nextKey = 1;\nfunction getKeys(items, { key, keys = key }, prevTransitions) {\n    if (keys === null) {\n        const reused = /* @__PURE__ */ new Set();\n        return items.map((item)=>{\n            const t = prevTransitions && prevTransitions.find((t2)=>t2.item === item && t2.phase !== \"leave\" /* LEAVE */  && !reused.has(t2));\n            if (t) {\n                reused.add(t);\n                return t.key;\n            }\n            return nextKey++;\n        });\n    }\n    return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.und(keys) ? items : _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(keys) ? items.map(keys) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(keys);\n}\n// src/hooks/useScroll.ts\n\nvar useScroll = ({ container, ...springOptions } = {})=>{\n    const [scrollValues, api] = useSpring(()=>({\n            scrollX: 0,\n            scrollY: 0,\n            scrollXProgress: 0,\n            scrollYProgress: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onScroll)(({ x, y })=>{\n            api.start({\n                scrollX: x.current,\n                scrollXProgress: x.progress,\n                scrollY: y.current,\n                scrollYProgress: y.progress\n            });\n        }, {\n            container: container?.current || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(scrollValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return scrollValues;\n};\n// src/hooks/useResize.ts\n\nvar useResize = ({ container, ...springOptions })=>{\n    const [sizeValues, api] = useSpring(()=>({\n            width: 0,\n            height: 0,\n            ...springOptions\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const cleanupScroll = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.onResize)(({ width, height })=>{\n            api.start({\n                width,\n                height,\n                immediate: sizeValues.width.get() === 0 || sizeValues.height.get() === 0\n            });\n        }, {\n            container: container?.current || void 0\n        });\n        return ()=>{\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)(Object.values(sizeValues), (value)=>value.stop());\n            cleanupScroll();\n        };\n    }, []);\n    return sizeValues;\n};\n// src/hooks/useInView.ts\n\n\nvar defaultThresholdOptions = {\n    any: 0,\n    all: 1\n};\nfunction useInView(props, args) {\n    const [isInView, setIsInView] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_1__.useRef)();\n    const propsFn = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(props) && props;\n    const springsProps = propsFn ? propsFn() : {};\n    const { to: to2 = {}, from = {}, ...restSpringProps } = springsProps;\n    const intersectionArguments = propsFn ? args : props;\n    const [springs, api] = useSpring(()=>({\n            from,\n            ...restSpringProps\n        }), []);\n    (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect)(()=>{\n        const element = ref.current;\n        const { root, once, amount = \"any\", ...restArgs } = intersectionArguments ?? {};\n        if (!element || once && isInView || typeof IntersectionObserver === \"undefined\") return;\n        const activeIntersections = /* @__PURE__ */ new WeakMap();\n        const onEnter = ()=>{\n            if (to2) {\n                api.start(to2);\n            }\n            setIsInView(true);\n            const cleanup = ()=>{\n                if (from) {\n                    api.start(from);\n                }\n                setIsInView(false);\n            };\n            return once ? void 0 : cleanup;\n        };\n        const handleIntersection = (entries)=>{\n            entries.forEach((entry)=>{\n                const onLeave = activeIntersections.get(entry.target);\n                if (entry.isIntersecting === Boolean(onLeave)) {\n                    return;\n                }\n                if (entry.isIntersecting) {\n                    const newOnLeave = onEnter();\n                    if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(newOnLeave)) {\n                        activeIntersections.set(entry.target, newOnLeave);\n                    } else {\n                        observer.unobserve(entry.target);\n                    }\n                } else if (onLeave) {\n                    onLeave();\n                    activeIntersections.delete(entry.target);\n                }\n            });\n        };\n        const observer = new IntersectionObserver(handleIntersection, {\n            root: root && root.current || void 0,\n            threshold: typeof amount === \"number\" || Array.isArray(amount) ? amount : defaultThresholdOptions[amount],\n            ...restArgs\n        });\n        observer.observe(element);\n        return ()=>observer.unobserve(element);\n    }, [\n        intersectionArguments\n    ]);\n    if (propsFn) {\n        return [\n            ref,\n            springs\n        ];\n    }\n    return [\n        ref,\n        isInView\n    ];\n}\n// src/components/Spring.tsx\nfunction Spring({ children, ...props }) {\n    return children(useSpring(props));\n}\n// src/components/Trail.tsx\n\nfunction Trail({ items, children, ...props }) {\n    const trails = useTrail(items.length, props);\n    return items.map((item, index)=>{\n        const result = children(item, index);\n        return _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.fun(result) ? result(trails[index]) : result;\n    });\n}\n// src/components/Transition.tsx\nfunction Transition({ items, children, ...props }) {\n    return useTransition(items, props)(children);\n}\n// src/interpolate.ts\n\n// src/Interpolation.ts\n\n\nvar Interpolation = class extends FrameValue {\n    constructor(source, args){\n        super();\n        this.source = source;\n        /** Equals false when in the frameloop */ this.idle = true;\n        /** The inputs which are currently animating */ this._active = /* @__PURE__ */ new Set();\n        this.calc = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createInterpolator)(...args);\n        const value = this._get();\n        const nodeType = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimatedType)(value);\n        (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.setAnimated)(this, nodeType.create(value));\n    }\n    advance(_dt) {\n        const value = this._get();\n        const oldValue = this.get();\n        if (!(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.isEqual)(value, oldValue)) {\n            (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getAnimated)(this).setValue(value);\n            this._onChange(value, this.idle);\n        }\n        if (!this.idle && checkIdle(this._active)) {\n            becomeIdle(this);\n        }\n    }\n    _get() {\n        const inputs = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.is.arr(this.source) ? this.source.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue) : (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.getFluidValue)(this.source));\n        return this.calc(...inputs);\n    }\n    _start() {\n        if (this.idle && !checkIdle(this._active)) {\n            this.idle = false;\n            (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(this), (node)=>{\n                node.done = false;\n            });\n            if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.skipAnimation) {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.raf.batchedUpdates(()=>this.advance());\n                becomeIdle(this);\n            } else {\n                _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.start(this);\n            }\n        }\n    }\n    // Observe our sources only when we're observed.\n    _attach() {\n        let priority = 1;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.addFluidObserver)(source, this);\n            }\n            if (isFrameValue(source)) {\n                if (!source.idle) {\n                    this._active.add(source);\n                }\n                priority = Math.max(priority, source.priority + 1);\n            }\n        });\n        this.priority = priority;\n        this._start();\n    }\n    // Stop observing our sources once we have no observers.\n    _detach() {\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source), (source)=>{\n            if ((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.hasFluidValue)(source)) {\n                (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.removeFluidObserver)(source, this);\n            }\n        });\n        this._active.clear();\n        becomeIdle(this);\n    }\n    /** @internal */ eventObserved(event) {\n        if (event.type == \"change\") {\n            if (event.idle) {\n                this.advance();\n            } else {\n                this._active.add(event.parent);\n                this._start();\n            }\n        } else if (event.type == \"idle\") {\n            this._active.delete(event.parent);\n        } else if (event.type == \"priority\") {\n            this.priority = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.toArray)(this.source).reduce((highest, parent)=>Math.max(highest, (isFrameValue(parent) ? parent.priority : 0) + 1), 0);\n        }\n    }\n};\nfunction isIdle(source) {\n    return source.idle !== false;\n}\nfunction checkIdle(active) {\n    return !active.size || Array.from(active).every(isIdle);\n}\nfunction becomeIdle(self) {\n    if (!self.idle) {\n        self.idle = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.each)((0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_2__.getPayload)(self), (node)=>{\n            node.done = true;\n        });\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.callFluidObservers)(self, {\n            type: \"idle\",\n            parent: self\n        });\n    }\n}\n// src/interpolate.ts\nvar to = (source, ...args)=>new Interpolation(source, args);\nvar interpolate = (source, ...args)=>((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.deprecateInterpolate)(), new Interpolation(source, args));\n// src/globals.ts\n\n_react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.createStringInterpolator,\n    to: (source, args)=>new Interpolation(source, args)\n});\nvar update = _react_spring_shared__WEBPACK_IMPORTED_MODULE_0__.frameLoop.advance;\n// src/index.ts\n\n\n //# sourceMappingURL=react-spring_core.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs":
/*!********************************************************************************!*\
  !*** ../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs ***!
  \********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FluidValue: () => (/* binding */ FluidValue),\n/* harmony export */   Globals: () => (/* binding */ globals_exports),\n/* harmony export */   addFluidObserver: () => (/* binding */ addFluidObserver),\n/* harmony export */   callFluidObserver: () => (/* binding */ callFluidObserver),\n/* harmony export */   callFluidObservers: () => (/* binding */ callFluidObservers),\n/* harmony export */   clamp: () => (/* binding */ clamp),\n/* harmony export */   colorToRgba: () => (/* binding */ colorToRgba),\n/* harmony export */   colors: () => (/* binding */ colors2),\n/* harmony export */   createInterpolator: () => (/* binding */ createInterpolator),\n/* harmony export */   createStringInterpolator: () => (/* binding */ createStringInterpolator2),\n/* harmony export */   defineHidden: () => (/* binding */ defineHidden),\n/* harmony export */   deprecateDirectCall: () => (/* binding */ deprecateDirectCall),\n/* harmony export */   deprecateInterpolate: () => (/* binding */ deprecateInterpolate),\n/* harmony export */   each: () => (/* binding */ each),\n/* harmony export */   eachProp: () => (/* binding */ eachProp),\n/* harmony export */   easings: () => (/* binding */ easings),\n/* harmony export */   flush: () => (/* binding */ flush),\n/* harmony export */   flushCalls: () => (/* binding */ flushCalls),\n/* harmony export */   frameLoop: () => (/* binding */ frameLoop),\n/* harmony export */   getFluidObservers: () => (/* binding */ getFluidObservers),\n/* harmony export */   getFluidValue: () => (/* binding */ getFluidValue),\n/* harmony export */   hasFluidValue: () => (/* binding */ hasFluidValue),\n/* harmony export */   hex3: () => (/* binding */ hex3),\n/* harmony export */   hex4: () => (/* binding */ hex4),\n/* harmony export */   hex6: () => (/* binding */ hex6),\n/* harmony export */   hex8: () => (/* binding */ hex8),\n/* harmony export */   hsl: () => (/* binding */ hsl),\n/* harmony export */   hsla: () => (/* binding */ hsla),\n/* harmony export */   is: () => (/* binding */ is),\n/* harmony export */   isAnimatedString: () => (/* binding */ isAnimatedString),\n/* harmony export */   isEqual: () => (/* binding */ isEqual),\n/* harmony export */   isSSR: () => (/* binding */ isSSR),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   onResize: () => (/* binding */ onResize),\n/* harmony export */   onScroll: () => (/* binding */ onScroll),\n/* harmony export */   once: () => (/* binding */ once),\n/* harmony export */   prefix: () => (/* binding */ prefix),\n/* harmony export */   raf: () => (/* binding */ raf),\n/* harmony export */   removeFluidObserver: () => (/* binding */ removeFluidObserver),\n/* harmony export */   rgb: () => (/* binding */ rgb),\n/* harmony export */   rgba: () => (/* binding */ rgba),\n/* harmony export */   setFluidGetter: () => (/* binding */ setFluidGetter),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   useConstant: () => (/* binding */ useConstant),\n/* harmony export */   useForceUpdate: () => (/* binding */ useForceUpdate),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   useMemoOne: () => (/* binding */ useMemoOne),\n/* harmony export */   useOnce: () => (/* binding */ useOnce),\n/* harmony export */   usePrev: () => (/* binding */ usePrev),\n/* harmony export */   useReducedMotion: () => (/* binding */ useReducedMotion)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\nvar __defProp = Object.defineProperty;\nvar __export = (target, all)=>{\n    for(var name in all)__defProp(target, name, {\n        get: all[name],\n        enumerable: true\n    });\n};\n// src/globals.ts\nvar globals_exports = {};\n__export(globals_exports, {\n    assign: ()=>assign,\n    colors: ()=>colors,\n    createStringInterpolator: ()=>createStringInterpolator,\n    skipAnimation: ()=>skipAnimation,\n    to: ()=>to,\n    willAdvance: ()=>willAdvance\n});\n// ../rafz/dist/react-spring_rafz.modern.mjs\nvar updateQueue = makeQueue();\nvar raf = (fn)=>schedule(fn, updateQueue);\nvar writeQueue = makeQueue();\nraf.write = (fn)=>schedule(fn, writeQueue);\nvar onStartQueue = makeQueue();\nraf.onStart = (fn)=>schedule(fn, onStartQueue);\nvar onFrameQueue = makeQueue();\nraf.onFrame = (fn)=>schedule(fn, onFrameQueue);\nvar onFinishQueue = makeQueue();\nraf.onFinish = (fn)=>schedule(fn, onFinishQueue);\nvar timeouts = [];\nraf.setTimeout = (handler, ms)=>{\n    const time = raf.now() + ms;\n    const cancel = ()=>{\n        const i = timeouts.findIndex((t)=>t.cancel == cancel);\n        if (~i) timeouts.splice(i, 1);\n        pendingCount -= ~i ? 1 : 0;\n    };\n    const timeout = {\n        time,\n        handler,\n        cancel\n    };\n    timeouts.splice(findTimeout(time), 0, timeout);\n    pendingCount += 1;\n    start();\n    return timeout;\n};\nvar findTimeout = (time)=>~(~timeouts.findIndex((t)=>t.time > time) || ~timeouts.length);\nraf.cancel = (fn)=>{\n    onStartQueue.delete(fn);\n    onFrameQueue.delete(fn);\n    onFinishQueue.delete(fn);\n    updateQueue.delete(fn);\n    writeQueue.delete(fn);\n};\nraf.sync = (fn)=>{\n    sync = true;\n    raf.batchedUpdates(fn);\n    sync = false;\n};\nraf.throttle = (fn)=>{\n    let lastArgs;\n    function queuedFn() {\n        try {\n            fn(...lastArgs);\n        } finally{\n            lastArgs = null;\n        }\n    }\n    function throttled(...args) {\n        lastArgs = args;\n        raf.onStart(queuedFn);\n    }\n    throttled.handler = fn;\n    throttled.cancel = ()=>{\n        onStartQueue.delete(queuedFn);\n        lastArgs = null;\n    };\n    return throttled;\n};\nvar nativeRaf =  false ? 0 : // eslint-disable-next-line @typescript-eslint/no-empty-function\n()=>{};\nraf.use = (impl)=>nativeRaf = impl;\nraf.now = typeof performance != \"undefined\" ? ()=>performance.now() : Date.now;\nraf.batchedUpdates = (fn)=>fn();\nraf.catch = console.error;\nraf.frameLoop = \"always\";\nraf.advance = ()=>{\n    if (raf.frameLoop !== \"demand\") {\n        console.warn(\"Cannot call the manual advancement of rafz whilst frameLoop is not set as demand\");\n    } else {\n        update();\n    }\n};\nvar ts = -1;\nvar pendingCount = 0;\nvar sync = false;\nfunction schedule(fn, queue) {\n    if (sync) {\n        queue.delete(fn);\n        fn(0);\n    } else {\n        queue.add(fn);\n        start();\n    }\n}\nfunction start() {\n    if (ts < 0) {\n        ts = 0;\n        if (raf.frameLoop !== \"demand\") {\n            nativeRaf(loop);\n        }\n    }\n}\nfunction stop() {\n    ts = -1;\n}\nfunction loop() {\n    if (~ts) {\n        nativeRaf(loop);\n        raf.batchedUpdates(update);\n    }\n}\nfunction update() {\n    const prevTs = ts;\n    ts = raf.now();\n    const count = findTimeout(ts);\n    if (count) {\n        eachSafely(timeouts.splice(0, count), (t)=>t.handler());\n        pendingCount -= count;\n    }\n    if (!pendingCount) {\n        stop();\n        return;\n    }\n    onStartQueue.flush();\n    updateQueue.flush(prevTs ? Math.min(64, ts - prevTs) : 16.667);\n    onFrameQueue.flush();\n    writeQueue.flush();\n    onFinishQueue.flush();\n}\nfunction makeQueue() {\n    let next = /* @__PURE__ */ new Set();\n    let current = next;\n    return {\n        add (fn) {\n            pendingCount += current == next && !next.has(fn) ? 1 : 0;\n            next.add(fn);\n        },\n        delete (fn) {\n            pendingCount -= current == next && next.has(fn) ? 1 : 0;\n            return next.delete(fn);\n        },\n        flush (arg) {\n            if (current.size) {\n                next = /* @__PURE__ */ new Set();\n                pendingCount -= current.size;\n                eachSafely(current, (fn)=>fn(arg) && next.add(fn));\n                pendingCount += next.size;\n                current = next;\n            }\n        }\n    };\n}\nfunction eachSafely(values, each2) {\n    values.forEach((value)=>{\n        try {\n            each2(value);\n        } catch (e) {\n            raf.catch(e);\n        }\n    });\n}\n// src/helpers.ts\nfunction noop() {}\nvar defineHidden = (obj, key, value)=>Object.defineProperty(obj, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\nvar is = {\n    arr: Array.isArray,\n    obj: (a)=>!!a && a.constructor.name === \"Object\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    und: (a)=>a === void 0\n};\nfunction isEqual(a, b) {\n    if (is.arr(a)) {\n        if (!is.arr(b) || a.length !== b.length) return false;\n        for(let i = 0; i < a.length; i++){\n            if (a[i] !== b[i]) return false;\n        }\n        return true;\n    }\n    return a === b;\n}\nvar each = (obj, fn)=>obj.forEach(fn);\nfunction eachProp(obj, fn, ctx) {\n    if (is.arr(obj)) {\n        for(let i = 0; i < obj.length; i++){\n            fn.call(ctx, obj[i], `${i}`);\n        }\n        return;\n    }\n    for(const key in obj){\n        if (obj.hasOwnProperty(key)) {\n            fn.call(ctx, obj[key], key);\n        }\n    }\n}\nvar toArray = (a)=>is.und(a) ? [] : is.arr(a) ? a : [\n        a\n    ];\nfunction flush(queue, iterator) {\n    if (queue.size) {\n        const items = Array.from(queue);\n        queue.clear();\n        each(items, iterator);\n    }\n}\nvar flushCalls = (queue, ...args)=>flush(queue, (fn)=>fn(...args));\nvar isSSR = ()=> true || 0;\n// src/globals.ts\nvar createStringInterpolator;\nvar to;\nvar colors = null;\nvar skipAnimation = false;\nvar willAdvance = noop;\nvar assign = (globals)=>{\n    if (globals.to) to = globals.to;\n    if (globals.now) raf.now = globals.now;\n    if (globals.colors !== void 0) colors = globals.colors;\n    if (globals.skipAnimation != null) skipAnimation = globals.skipAnimation;\n    if (globals.createStringInterpolator) createStringInterpolator = globals.createStringInterpolator;\n    if (globals.requestAnimationFrame) raf.use(globals.requestAnimationFrame);\n    if (globals.batchedUpdates) raf.batchedUpdates = globals.batchedUpdates;\n    if (globals.willAdvance) willAdvance = globals.willAdvance;\n    if (globals.frameLoop) raf.frameLoop = globals.frameLoop;\n};\n// src/FrameLoop.ts\nvar startQueue = /* @__PURE__ */ new Set();\nvar currentFrame = [];\nvar prevFrame = [];\nvar priority = 0;\nvar frameLoop = {\n    get idle () {\n        return !startQueue.size && !currentFrame.length;\n    },\n    /** Advance the given animation on every frame until idle. */ start (animation) {\n        if (priority > animation.priority) {\n            startQueue.add(animation);\n            raf.onStart(flushStartQueue);\n        } else {\n            startSafely(animation);\n            raf(advance);\n        }\n    },\n    /** Advance all animations by the given time. */ advance,\n    /** Call this when an animation's priority changes. */ sort (animation) {\n        if (priority) {\n            raf.onFrame(()=>frameLoop.sort(animation));\n        } else {\n            const prevIndex = currentFrame.indexOf(animation);\n            if (~prevIndex) {\n                currentFrame.splice(prevIndex, 1);\n                startUnsafely(animation);\n            }\n        }\n    },\n    /**\n   * Clear all animations. For testing purposes.\n   *\n   * ☠️ Never call this from within the frameloop.\n   */ clear () {\n        currentFrame = [];\n        startQueue.clear();\n    }\n};\nfunction flushStartQueue() {\n    startQueue.forEach(startSafely);\n    startQueue.clear();\n    raf(advance);\n}\nfunction startSafely(animation) {\n    if (!currentFrame.includes(animation)) startUnsafely(animation);\n}\nfunction startUnsafely(animation) {\n    currentFrame.splice(findIndex(currentFrame, (other)=>other.priority > animation.priority), 0, animation);\n}\nfunction advance(dt) {\n    const nextFrame = prevFrame;\n    for(let i = 0; i < currentFrame.length; i++){\n        const animation = currentFrame[i];\n        priority = animation.priority;\n        if (!animation.idle) {\n            willAdvance(animation);\n            animation.advance(dt);\n            if (!animation.idle) {\n                nextFrame.push(animation);\n            }\n        }\n    }\n    priority = 0;\n    prevFrame = currentFrame;\n    prevFrame.length = 0;\n    currentFrame = nextFrame;\n    return currentFrame.length > 0;\n}\nfunction findIndex(arr, test) {\n    const index = arr.findIndex(test);\n    return index < 0 ? arr.length : index;\n}\n// src/clamp.ts\nvar clamp = (min, max, v)=>Math.min(Math.max(v, min), max);\n// src/colors.ts\nvar colors2 = {\n    transparent: 0,\n    aliceblue: 4042850303,\n    antiquewhite: 4209760255,\n    aqua: 16777215,\n    aquamarine: 2147472639,\n    azure: 4043309055,\n    beige: 4126530815,\n    bisque: 4293182719,\n    black: 255,\n    blanchedalmond: 4293643775,\n    blue: 65535,\n    blueviolet: 2318131967,\n    brown: 2771004159,\n    burlywood: 3736635391,\n    burntsienna: 3934150143,\n    cadetblue: 1604231423,\n    chartreuse: 2147418367,\n    chocolate: 3530104575,\n    coral: 4286533887,\n    cornflowerblue: 1687547391,\n    cornsilk: 4294499583,\n    crimson: 3692313855,\n    cyan: 16777215,\n    darkblue: 35839,\n    darkcyan: 9145343,\n    darkgoldenrod: 3095792639,\n    darkgray: 2846468607,\n    darkgreen: 6553855,\n    darkgrey: 2846468607,\n    darkkhaki: 3182914559,\n    darkmagenta: 2332068863,\n    darkolivegreen: 1433087999,\n    darkorange: 4287365375,\n    darkorchid: 2570243327,\n    darkred: 2332033279,\n    darksalmon: 3918953215,\n    darkseagreen: 2411499519,\n    darkslateblue: 1211993087,\n    darkslategray: 793726975,\n    darkslategrey: 793726975,\n    darkturquoise: 13554175,\n    darkviolet: 2483082239,\n    deeppink: 4279538687,\n    deepskyblue: 12582911,\n    dimgray: 1768516095,\n    dimgrey: 1768516095,\n    dodgerblue: 512819199,\n    firebrick: 2988581631,\n    floralwhite: 4294635775,\n    forestgreen: 579543807,\n    fuchsia: 4278255615,\n    gainsboro: 3705462015,\n    ghostwhite: 4177068031,\n    gold: 4292280575,\n    goldenrod: 3668254975,\n    gray: 2155905279,\n    green: 8388863,\n    greenyellow: 2919182335,\n    grey: 2155905279,\n    honeydew: 4043305215,\n    hotpink: 4285117695,\n    indianred: 3445382399,\n    indigo: 1258324735,\n    ivory: 4294963455,\n    khaki: 4041641215,\n    lavender: 3873897215,\n    lavenderblush: 4293981695,\n    lawngreen: 2096890111,\n    lemonchiffon: 4294626815,\n    lightblue: 2916673279,\n    lightcoral: 4034953471,\n    lightcyan: 3774873599,\n    lightgoldenrodyellow: 4210742015,\n    lightgray: 3553874943,\n    lightgreen: 2431553791,\n    lightgrey: 3553874943,\n    lightpink: 4290167295,\n    lightsalmon: 4288707327,\n    lightseagreen: 548580095,\n    lightskyblue: 2278488831,\n    lightslategray: 2005441023,\n    lightslategrey: 2005441023,\n    lightsteelblue: 2965692159,\n    lightyellow: 4294959359,\n    lime: 16711935,\n    limegreen: 852308735,\n    linen: 4210091775,\n    magenta: 4278255615,\n    maroon: 2147483903,\n    mediumaquamarine: 1724754687,\n    mediumblue: 52735,\n    mediumorchid: 3126187007,\n    mediumpurple: 2473647103,\n    mediumseagreen: 1018393087,\n    mediumslateblue: 2070474495,\n    mediumspringgreen: 16423679,\n    mediumturquoise: 1221709055,\n    mediumvioletred: 3340076543,\n    midnightblue: 421097727,\n    mintcream: 4127193855,\n    mistyrose: 4293190143,\n    moccasin: 4293178879,\n    navajowhite: 4292783615,\n    navy: 33023,\n    oldlace: 4260751103,\n    olive: 2155872511,\n    olivedrab: 1804477439,\n    orange: 4289003775,\n    orangered: 4282712319,\n    orchid: 3664828159,\n    palegoldenrod: 4008225535,\n    palegreen: 2566625535,\n    paleturquoise: 2951671551,\n    palevioletred: 3681588223,\n    papayawhip: 4293907967,\n    peachpuff: 4292524543,\n    peru: 3448061951,\n    pink: 4290825215,\n    plum: 3718307327,\n    powderblue: 2967529215,\n    purple: 2147516671,\n    rebeccapurple: 1714657791,\n    red: 4278190335,\n    rosybrown: 3163525119,\n    royalblue: 1097458175,\n    saddlebrown: 2336560127,\n    salmon: 4202722047,\n    sandybrown: 4104413439,\n    seagreen: 780883967,\n    seashell: 4294307583,\n    sienna: 2689740287,\n    silver: 3233857791,\n    skyblue: 2278484991,\n    slateblue: 1784335871,\n    slategray: 1887473919,\n    slategrey: 1887473919,\n    snow: 4294638335,\n    springgreen: 16744447,\n    steelblue: 1182971135,\n    tan: 3535047935,\n    teal: 8421631,\n    thistle: 3636451583,\n    tomato: 4284696575,\n    turquoise: 1088475391,\n    violet: 4001558271,\n    wheat: 4125012991,\n    white: 4294967295,\n    whitesmoke: 4126537215,\n    yellow: 4294902015,\n    yellowgreen: 2597139199\n};\n// src/colorMatchers.ts\nvar NUMBER = \"[-+]?\\\\d*\\\\.?\\\\d+\";\nvar PERCENTAGE = NUMBER + \"%\";\nfunction call(...parts) {\n    return \"\\\\(\\\\s*(\" + parts.join(\")\\\\s*,\\\\s*(\") + \")\\\\s*\\\\)\";\n}\nvar rgb = new RegExp(\"rgb\" + call(NUMBER, NUMBER, NUMBER));\nvar rgba = new RegExp(\"rgba\" + call(NUMBER, NUMBER, NUMBER, NUMBER));\nvar hsl = new RegExp(\"hsl\" + call(NUMBER, PERCENTAGE, PERCENTAGE));\nvar hsla = new RegExp(\"hsla\" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));\nvar hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;\nvar hex6 = /^#([0-9a-fA-F]{6})$/;\nvar hex8 = /^#([0-9a-fA-F]{8})$/;\n// src/normalizeColor.ts\nfunction normalizeColor(color) {\n    let match;\n    if (typeof color === \"number\") {\n        return color >>> 0 === color && color >= 0 && color <= 4294967295 ? color : null;\n    }\n    if (match = hex6.exec(color)) return parseInt(match[1] + \"ff\", 16) >>> 0;\n    if (colors && colors[color] !== void 0) {\n        return colors[color];\n    }\n    if (match = rgb.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        255) >>> // a\n        0;\n    }\n    if (match = rgba.exec(color)) {\n        return (parse255(match[1]) << 24 | // r\n        parse255(match[2]) << 16 | // g\n        parse255(match[3]) << 8 | // b\n        parse1(match[4])) >>> // a\n        0;\n    }\n    if (match = hex3.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        \"ff\", // a\n        16) >>> 0;\n    }\n    if (match = hex8.exec(color)) return parseInt(match[1], 16) >>> 0;\n    if (match = hex4.exec(color)) {\n        return parseInt(match[1] + match[1] + // r\n        match[2] + match[2] + // g\n        match[3] + match[3] + // b\n        match[4] + match[4], // a\n        16) >>> 0;\n    }\n    if (match = hsl.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | 255) >>> // a\n        0;\n    }\n    if (match = hsla.exec(color)) {\n        return (hslToRgb(parse360(match[1]), // h\n        parsePercentage(match[2]), // s\n        parsePercentage(match[3])) | parse1(match[4])) >>> // a\n        0;\n    }\n    return null;\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) t += 1;\n    if (t > 1) t -= 1;\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\n    if (t < 1 / 2) return q;\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\nfunction hslToRgb(h, s, l) {\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    const r = hue2rgb(p, q, h + 1 / 3);\n    const g = hue2rgb(p, q, h);\n    const b = hue2rgb(p, q, h - 1 / 3);\n    return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;\n}\nfunction parse255(str) {\n    const int = parseInt(str, 10);\n    if (int < 0) return 0;\n    if (int > 255) return 255;\n    return int;\n}\nfunction parse360(str) {\n    const int = parseFloat(str);\n    return (int % 360 + 360) % 360 / 360;\n}\nfunction parse1(str) {\n    const num = parseFloat(str);\n    if (num < 0) return 0;\n    if (num > 1) return 255;\n    return Math.round(num * 255);\n}\nfunction parsePercentage(str) {\n    const int = parseFloat(str);\n    if (int < 0) return 0;\n    if (int > 100) return 1;\n    return int / 100;\n}\n// src/colorToRgba.ts\nfunction colorToRgba(input) {\n    let int32Color = normalizeColor(input);\n    if (int32Color === null) return input;\n    int32Color = int32Color || 0;\n    const r = (int32Color & 4278190080) >>> 24;\n    const g = (int32Color & 16711680) >>> 16;\n    const b = (int32Color & 65280) >>> 8;\n    const a = (int32Color & 255) / 255;\n    return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n// src/createInterpolator.ts\nvar createInterpolator = (range, output, extrapolate)=>{\n    if (is.fun(range)) {\n        return range;\n    }\n    if (is.arr(range)) {\n        return createInterpolator({\n            range,\n            output,\n            extrapolate\n        });\n    }\n    if (is.str(range.output[0])) {\n        return createStringInterpolator(range);\n    }\n    const config = range;\n    const outputRange = config.output;\n    const inputRange = config.range || [\n        0,\n        1\n    ];\n    const extrapolateLeft = config.extrapolateLeft || config.extrapolate || \"extend\";\n    const extrapolateRight = config.extrapolateRight || config.extrapolate || \"extend\";\n    const easing = config.easing || ((t)=>t);\n    return (input)=>{\n        const range2 = findRange(input, inputRange);\n        return interpolate(input, inputRange[range2], inputRange[range2 + 1], outputRange[range2], outputRange[range2 + 1], easing, extrapolateLeft, extrapolateRight, config.map);\n    };\n};\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight, map) {\n    let result = map ? map(input) : input;\n    if (result < inputMin) {\n        if (extrapolateLeft === \"identity\") return result;\n        else if (extrapolateLeft === \"clamp\") result = inputMin;\n    }\n    if (result > inputMax) {\n        if (extrapolateRight === \"identity\") return result;\n        else if (extrapolateRight === \"clamp\") result = inputMax;\n    }\n    if (outputMin === outputMax) return outputMin;\n    if (inputMin === inputMax) return input <= inputMin ? outputMin : outputMax;\n    if (inputMin === -Infinity) result = -result;\n    else if (inputMax === Infinity) result = result - inputMin;\n    else result = (result - inputMin) / (inputMax - inputMin);\n    result = easing(result);\n    if (outputMin === -Infinity) result = -result;\n    else if (outputMax === Infinity) result = result + outputMin;\n    else result = result * (outputMax - outputMin) + outputMin;\n    return result;\n}\nfunction findRange(input, inputRange) {\n    for(var i = 1; i < inputRange.length - 1; ++i)if (inputRange[i] >= input) break;\n    return i - 1;\n}\n// src/easings.ts\nvar steps = (steps2, direction = \"end\")=>(progress2)=>{\n        progress2 = direction === \"end\" ? Math.min(progress2, 0.999) : Math.max(progress2, 1e-3);\n        const expanded = progress2 * steps2;\n        const rounded = direction === \"end\" ? Math.floor(expanded) : Math.ceil(expanded);\n        return clamp(0, 1, rounded / steps2);\n    };\nvar c1 = 1.70158;\nvar c2 = c1 * 1.525;\nvar c3 = c1 + 1;\nvar c4 = 2 * Math.PI / 3;\nvar c5 = 2 * Math.PI / 4.5;\nvar bounceOut = (x)=>{\n    const n1 = 7.5625;\n    const d1 = 2.75;\n    if (x < 1 / d1) {\n        return n1 * x * x;\n    } else if (x < 2 / d1) {\n        return n1 * (x -= 1.5 / d1) * x + 0.75;\n    } else if (x < 2.5 / d1) {\n        return n1 * (x -= 2.25 / d1) * x + 0.9375;\n    } else {\n        return n1 * (x -= 2.625 / d1) * x + 0.984375;\n    }\n};\nvar easings = {\n    linear: (x)=>x,\n    easeInQuad: (x)=>x * x,\n    easeOutQuad: (x)=>1 - (1 - x) * (1 - x),\n    easeInOutQuad: (x)=>x < 0.5 ? 2 * x * x : 1 - Math.pow(-2 * x + 2, 2) / 2,\n    easeInCubic: (x)=>x * x * x,\n    easeOutCubic: (x)=>1 - Math.pow(1 - x, 3),\n    easeInOutCubic: (x)=>x < 0.5 ? 4 * x * x * x : 1 - Math.pow(-2 * x + 2, 3) / 2,\n    easeInQuart: (x)=>x * x * x * x,\n    easeOutQuart: (x)=>1 - Math.pow(1 - x, 4),\n    easeInOutQuart: (x)=>x < 0.5 ? 8 * x * x * x * x : 1 - Math.pow(-2 * x + 2, 4) / 2,\n    easeInQuint: (x)=>x * x * x * x * x,\n    easeOutQuint: (x)=>1 - Math.pow(1 - x, 5),\n    easeInOutQuint: (x)=>x < 0.5 ? 16 * x * x * x * x * x : 1 - Math.pow(-2 * x + 2, 5) / 2,\n    easeInSine: (x)=>1 - Math.cos(x * Math.PI / 2),\n    easeOutSine: (x)=>Math.sin(x * Math.PI / 2),\n    easeInOutSine: (x)=>-(Math.cos(Math.PI * x) - 1) / 2,\n    easeInExpo: (x)=>x === 0 ? 0 : Math.pow(2, 10 * x - 10),\n    easeOutExpo: (x)=>x === 1 ? 1 : 1 - Math.pow(2, -10 * x),\n    easeInOutExpo: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? Math.pow(2, 20 * x - 10) / 2 : (2 - Math.pow(2, -20 * x + 10)) / 2,\n    easeInCirc: (x)=>1 - Math.sqrt(1 - Math.pow(x, 2)),\n    easeOutCirc: (x)=>Math.sqrt(1 - Math.pow(x - 1, 2)),\n    easeInOutCirc: (x)=>x < 0.5 ? (1 - Math.sqrt(1 - Math.pow(2 * x, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * x + 2, 2)) + 1) / 2,\n    easeInBack: (x)=>c3 * x * x * x - c1 * x * x,\n    easeOutBack: (x)=>1 + c3 * Math.pow(x - 1, 3) + c1 * Math.pow(x - 1, 2),\n    easeInOutBack: (x)=>x < 0.5 ? Math.pow(2 * x, 2) * ((c2 + 1) * 2 * x - c2) / 2 : (Math.pow(2 * x - 2, 2) * ((c2 + 1) * (x * 2 - 2) + c2) + 2) / 2,\n    easeInElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : -Math.pow(2, 10 * x - 10) * Math.sin((x * 10 - 10.75) * c4),\n    easeOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : Math.pow(2, -10 * x) * Math.sin((x * 10 - 0.75) * c4) + 1,\n    easeInOutElastic: (x)=>x === 0 ? 0 : x === 1 ? 1 : x < 0.5 ? -(Math.pow(2, 20 * x - 10) * Math.sin((20 * x - 11.125) * c5)) / 2 : Math.pow(2, -20 * x + 10) * Math.sin((20 * x - 11.125) * c5) / 2 + 1,\n    easeInBounce: (x)=>1 - bounceOut(1 - x),\n    easeOutBounce: bounceOut,\n    easeInOutBounce: (x)=>x < 0.5 ? (1 - bounceOut(1 - 2 * x)) / 2 : (1 + bounceOut(2 * x - 1)) / 2,\n    steps\n};\n// src/fluids.ts\nvar $get = Symbol.for(\"FluidValue.get\");\nvar $observers = Symbol.for(\"FluidValue.observers\");\nvar hasFluidValue = (arg)=>Boolean(arg && arg[$get]);\nvar getFluidValue = (arg)=>arg && arg[$get] ? arg[$get]() : arg;\nvar getFluidObservers = (target)=>target[$observers] || null;\nfunction callFluidObserver(observer2, event) {\n    if (observer2.eventObserved) {\n        observer2.eventObserved(event);\n    } else {\n        observer2(event);\n    }\n}\nfunction callFluidObservers(target, event) {\n    const observers = target[$observers];\n    if (observers) {\n        observers.forEach((observer2)=>{\n            callFluidObserver(observer2, event);\n        });\n    }\n}\nvar FluidValue = class {\n    constructor(get){\n        if (!get && !(get = this.get)) {\n            throw Error(\"Unknown getter\");\n        }\n        setFluidGetter(this, get);\n    }\n};\n$get, $observers;\nvar setFluidGetter = (target, get)=>setHidden(target, $get, get);\nfunction addFluidObserver(target, observer2) {\n    if (target[$get]) {\n        let observers = target[$observers];\n        if (!observers) {\n            setHidden(target, $observers, observers = /* @__PURE__ */ new Set());\n        }\n        if (!observers.has(observer2)) {\n            observers.add(observer2);\n            if (target.observerAdded) {\n                target.observerAdded(observers.size, observer2);\n            }\n        }\n    }\n    return observer2;\n}\nfunction removeFluidObserver(target, observer2) {\n    const observers = target[$observers];\n    if (observers && observers.has(observer2)) {\n        const count = observers.size - 1;\n        if (count) {\n            observers.delete(observer2);\n        } else {\n            target[$observers] = null;\n        }\n        if (target.observerRemoved) {\n            target.observerRemoved(count, observer2);\n        }\n    }\n}\nvar setHidden = (target, key, value)=>Object.defineProperty(target, key, {\n        value,\n        writable: true,\n        configurable: true\n    });\n// src/regexs.ts\nvar numberRegex = /[+\\-]?(?:0|[1-9]\\d*)(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g;\nvar colorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d\\.]+%?\\))/gi;\nvar unitRegex = new RegExp(`(${numberRegex.source})(%|[a-z]+)`, \"i\");\nvar rgbaRegex = /rgba\\(([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+), ([0-9\\.-]+)\\)/gi;\nvar cssVariableRegex = /var\\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\\)/;\n// src/variableToRgba.ts\nvar variableToRgba = (input)=>{\n    const [token, fallback] = parseCSSVariable(input);\n    if (!token || isSSR()) {\n        return input;\n    }\n    const value = window.getComputedStyle(document.documentElement).getPropertyValue(token);\n    if (value) {\n        return value.trim();\n    } else if (fallback && fallback.startsWith(\"--\")) {\n        const value2 = window.getComputedStyle(document.documentElement).getPropertyValue(fallback);\n        if (value2) {\n            return value2;\n        } else {\n            return input;\n        }\n    } else if (fallback && cssVariableRegex.test(fallback)) {\n        return variableToRgba(fallback);\n    } else if (fallback) {\n        return fallback;\n    }\n    return input;\n};\nvar parseCSSVariable = (current)=>{\n    const match = cssVariableRegex.exec(current);\n    if (!match) return [\n        , \n    ];\n    const [, token, fallback] = match;\n    return [\n        token,\n        fallback\n    ];\n};\n// src/stringInterpolation.ts\nvar namedColorRegex;\nvar rgbaRound = (_, p1, p2, p3, p4)=>`rgba(${Math.round(p1)}, ${Math.round(p2)}, ${Math.round(p3)}, ${p4})`;\nvar createStringInterpolator2 = (config)=>{\n    if (!namedColorRegex) namedColorRegex = colors ? // match color names, ignore partial matches\n    new RegExp(`(${Object.keys(colors).join(\"|\")})(?!\\\\w)`, \"g\") : // never match\n    /^\\b$/;\n    const output = config.output.map((value)=>{\n        return getFluidValue(value).replace(cssVariableRegex, variableToRgba).replace(colorRegex, colorToRgba).replace(namedColorRegex, colorToRgba);\n    });\n    const keyframes = output.map((value)=>value.match(numberRegex).map(Number));\n    const outputRanges = keyframes[0].map((_, i)=>keyframes.map((values)=>{\n            if (!(i in values)) {\n                throw Error('The arity of each \"output\" value must be equal');\n            }\n            return values[i];\n        }));\n    const interpolators = outputRanges.map((output2)=>createInterpolator({\n            ...config,\n            output: output2\n        }));\n    return (input)=>{\n        const missingUnit = !unitRegex.test(output[0]) && output.find((value)=>unitRegex.test(value))?.replace(numberRegex, \"\");\n        let i = 0;\n        return output[0].replace(numberRegex, ()=>`${interpolators[i++](input)}${missingUnit || \"\"}`).replace(rgbaRegex, rgbaRound);\n    };\n};\n// src/deprecations.ts\nvar prefix = \"react-spring: \";\nvar once = (fn)=>{\n    const func = fn;\n    let called = false;\n    if (typeof func != \"function\") {\n        throw new TypeError(`${prefix}once requires a function parameter`);\n    }\n    return (...args)=>{\n        if (!called) {\n            func(...args);\n            called = true;\n        }\n    };\n};\nvar warnInterpolate = once(console.warn);\nfunction deprecateInterpolate() {\n    warnInterpolate(`${prefix}The \"interpolate\" function is deprecated in v9 (use \"to\" instead)`);\n}\nvar warnDirectCall = once(console.warn);\nfunction deprecateDirectCall() {\n    warnDirectCall(`${prefix}Directly calling start instead of using the api object is deprecated in v9 (use \".start\" instead), this will be removed in later 0.X.0 versions`);\n}\n// src/isAnimatedString.ts\nfunction isAnimatedString(value) {\n    return is.str(value) && (value[0] == \"#\" || /\\d/.test(value) || // Do not identify a CSS variable as an AnimatedString if its SSR\n    !isSSR() && cssVariableRegex.test(value) || value in (colors || {}));\n}\n// src/dom-events/resize/resizeElement.ts\nvar observer;\nvar resizeHandlers = /* @__PURE__ */ new WeakMap();\nvar handleObservation = (entries)=>entries.forEach(({ target, contentRect })=>{\n        return resizeHandlers.get(target)?.forEach((handler)=>handler(contentRect));\n    });\nfunction resizeElement(handler, target) {\n    if (!observer) {\n        if (typeof ResizeObserver !== \"undefined\") {\n            observer = new ResizeObserver(handleObservation);\n        }\n    }\n    let elementHandlers = resizeHandlers.get(target);\n    if (!elementHandlers) {\n        elementHandlers = /* @__PURE__ */ new Set();\n        resizeHandlers.set(target, elementHandlers);\n    }\n    elementHandlers.add(handler);\n    if (observer) {\n        observer.observe(target);\n    }\n    return ()=>{\n        const elementHandlers2 = resizeHandlers.get(target);\n        if (!elementHandlers2) return;\n        elementHandlers2.delete(handler);\n        if (!elementHandlers2.size && observer) {\n            observer.unobserve(target);\n        }\n    };\n}\n// src/dom-events/resize/resizeWindow.ts\nvar listeners = /* @__PURE__ */ new Set();\nvar cleanupWindowResizeHandler;\nvar createResizeHandler = ()=>{\n    const handleResize = ()=>{\n        listeners.forEach((callback)=>callback({\n                width: window.innerWidth,\n                height: window.innerHeight\n            }));\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return ()=>{\n        window.removeEventListener(\"resize\", handleResize);\n    };\n};\nvar resizeWindow = (callback)=>{\n    listeners.add(callback);\n    if (!cleanupWindowResizeHandler) {\n        cleanupWindowResizeHandler = createResizeHandler();\n    }\n    return ()=>{\n        listeners.delete(callback);\n        if (!listeners.size && cleanupWindowResizeHandler) {\n            cleanupWindowResizeHandler();\n            cleanupWindowResizeHandler = void 0;\n        }\n    };\n};\n// src/dom-events/resize/index.ts\nvar onResize = (callback, { container = document.documentElement } = {})=>{\n    if (container === document.documentElement) {\n        return resizeWindow(callback);\n    } else {\n        return resizeElement(callback, container);\n    }\n};\n// src/progress.ts\nvar progress = (min, max, value)=>max - min === 0 ? 1 : (value - min) / (max - min);\n// src/dom-events/scroll/ScrollHandler.ts\nvar SCROLL_KEYS = {\n    x: {\n        length: \"Width\",\n        position: \"Left\"\n    },\n    y: {\n        length: \"Height\",\n        position: \"Top\"\n    }\n};\nvar ScrollHandler = class {\n    constructor(callback, container){\n        this.createAxis = ()=>({\n                current: 0,\n                progress: 0,\n                scrollLength: 0\n            });\n        this.updateAxis = (axisName)=>{\n            const axis = this.info[axisName];\n            const { length, position } = SCROLL_KEYS[axisName];\n            axis.current = this.container[`scroll${position}`];\n            axis.scrollLength = this.container[\"scroll\" + length] - this.container[\"client\" + length];\n            axis.progress = progress(0, axis.scrollLength, axis.current);\n        };\n        this.update = ()=>{\n            this.updateAxis(\"x\");\n            this.updateAxis(\"y\");\n        };\n        this.sendEvent = ()=>{\n            this.callback(this.info);\n        };\n        this.advance = ()=>{\n            this.update();\n            this.sendEvent();\n        };\n        this.callback = callback;\n        this.container = container;\n        this.info = {\n            time: 0,\n            x: this.createAxis(),\n            y: this.createAxis()\n        };\n    }\n};\n// src/dom-events/scroll/index.ts\nvar scrollListeners = /* @__PURE__ */ new WeakMap();\nvar resizeListeners = /* @__PURE__ */ new WeakMap();\nvar onScrollHandlers = /* @__PURE__ */ new WeakMap();\nvar getTarget = (container)=>container === document.documentElement ? window : container;\nvar onScroll = (callback, { container = document.documentElement } = {})=>{\n    let containerHandlers = onScrollHandlers.get(container);\n    if (!containerHandlers) {\n        containerHandlers = /* @__PURE__ */ new Set();\n        onScrollHandlers.set(container, containerHandlers);\n    }\n    const containerHandler = new ScrollHandler(callback, container);\n    containerHandlers.add(containerHandler);\n    if (!scrollListeners.has(container)) {\n        const listener = ()=>{\n            containerHandlers?.forEach((handler)=>handler.advance());\n            return true;\n        };\n        scrollListeners.set(container, listener);\n        const target = getTarget(container);\n        window.addEventListener(\"resize\", listener, {\n            passive: true\n        });\n        if (container !== document.documentElement) {\n            resizeListeners.set(container, onResize(listener, {\n                container\n            }));\n        }\n        target.addEventListener(\"scroll\", listener, {\n            passive: true\n        });\n    }\n    const animateScroll = scrollListeners.get(container);\n    raf(animateScroll);\n    return ()=>{\n        raf.cancel(animateScroll);\n        const containerHandlers2 = onScrollHandlers.get(container);\n        if (!containerHandlers2) return;\n        containerHandlers2.delete(containerHandler);\n        if (containerHandlers2.size) return;\n        const listener = scrollListeners.get(container);\n        scrollListeners.delete(container);\n        if (listener) {\n            getTarget(container).removeEventListener(\"scroll\", listener);\n            window.removeEventListener(\"resize\", listener);\n            resizeListeners.get(container)?.();\n        }\n    };\n};\n// src/hooks/useConstant.ts\n\nfunction useConstant(init) {\n    const ref = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    if (ref.current === null) {\n        ref.current = init();\n    }\n    return ref.current;\n}\n// src/hooks/useForceUpdate.ts\n\n// src/hooks/useIsMounted.ts\n\n// src/hooks/useIsomorphicLayoutEffect.ts\n\nvar useIsomorphicLayoutEffect = isSSR() ? react__WEBPACK_IMPORTED_MODULE_0__.useEffect : react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect;\n// src/hooks/useIsMounted.ts\nvar useIsMounted = ()=>{\n    const isMounted = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(false);\n    useIsomorphicLayoutEffect(()=>{\n        isMounted.current = true;\n        return ()=>{\n            isMounted.current = false;\n        };\n    }, []);\n    return isMounted;\n};\n// src/hooks/useForceUpdate.ts\nfunction useForceUpdate() {\n    const update2 = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)()[1];\n    const isMounted = useIsMounted();\n    return ()=>{\n        if (isMounted.current) {\n            update2(Math.random());\n        }\n    };\n}\n// src/hooks/useMemoOne.ts\n\nfunction useMemoOne(getResult, inputs) {\n    const [initial] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            inputs,\n            result: getResult()\n        }));\n    const committed = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    const prevCache = committed.current;\n    let cache = prevCache;\n    if (cache) {\n        const useCache = Boolean(inputs && cache.inputs && areInputsEqual(inputs, cache.inputs));\n        if (!useCache) {\n            cache = {\n                inputs,\n                result: getResult()\n            };\n        }\n    } else {\n        cache = initial;\n    }\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        committed.current = cache;\n        if (prevCache == initial) {\n            initial.inputs = initial.result = void 0;\n        }\n    }, [\n        cache\n    ]);\n    return cache.result;\n}\nfunction areInputsEqual(next, prev) {\n    if (next.length !== prev.length) {\n        return false;\n    }\n    for(let i = 0; i < next.length; i++){\n        if (next[i] !== prev[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n// src/hooks/useOnce.ts\n\nvar useOnce = (effect)=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(effect, emptyDeps);\nvar emptyDeps = [];\n// src/hooks/usePrev.ts\n\nfunction usePrev(value) {\n    const prevRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        prevRef.current = value;\n    });\n    return prevRef.current;\n}\n// src/hooks/useReducedMotion.ts\n\nvar useReducedMotion = ()=>{\n    const [reducedMotion, setReducedMotion] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    useIsomorphicLayoutEffect(()=>{\n        const mql = window.matchMedia(\"(prefers-reduced-motion)\");\n        const handleMediaChange = (e)=>{\n            setReducedMotion(e.matches);\n            assign({\n                skipAnimation: e.matches\n            });\n        };\n        handleMediaChange(mql);\n        mql.addEventListener(\"change\", handleMediaChange);\n        return ()=>{\n            mql.removeEventListener(\"change\", handleMediaChange);\n        };\n    }, []);\n    return reducedMotion;\n};\n //# sourceMappingURL=react-spring_shared.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@react-spring/types/dist/react-spring_types.modern.mjs":
/*!******************************************************************************!*\
  !*** ../node_modules/@react-spring/types/dist/react-spring_types.modern.mjs ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* binding */ Any)\n/* harmony export */ });\n// src/utils.ts\nvar Any = class {\n};\n //# sourceMappingURL=react-spring_types.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL0ByZWFjdC1zcHJpbmcvdHlwZXMvZGlzdC9yZWFjdC1zcHJpbmdfdHlwZXMubW9kZXJuLm1qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsZUFBZTtBQUNmLElBQUlBLE1BQU07QUFDVjtBQUdFLENBQ0Ysc0RBQXNEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYnJiLXRyYXZlbGluZy8uLi9ub2RlX21vZHVsZXMvQHJlYWN0LXNwcmluZy90eXBlcy9kaXN0L3JlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzPzVkMTgiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzLnRzXG52YXIgQW55ID0gY2xhc3Mge1xufTtcbmV4cG9ydCB7XG4gIEFueVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlYWN0LXNwcmluZ190eXBlcy5tb2Rlcm4ubWpzLm1hcCJdLCJuYW1lcyI6WyJBbnkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@react-spring/types/dist/react-spring_types.modern.mjs\n");

/***/ }),

/***/ "(ssr)/../node_modules/@react-spring/web/dist/react-spring_web.modern.mjs":
/*!**************************************************************************!*\
  !*** ../node_modules/@react-spring/web/dist/react-spring_web.modern.mjs ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Any: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Any),\n/* harmony export */   BailSignal: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.BailSignal),\n/* harmony export */   Controller: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Controller),\n/* harmony export */   FrameValue: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.FrameValue),\n/* harmony export */   Globals: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals),\n/* harmony export */   Interpolation: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Interpolation),\n/* harmony export */   Spring: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Spring),\n/* harmony export */   SpringContext: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringContext),\n/* harmony export */   SpringRef: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringRef),\n/* harmony export */   SpringValue: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.SpringValue),\n/* harmony export */   Trail: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Trail),\n/* harmony export */   Transition: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Transition),\n/* harmony export */   a: () => (/* binding */ animated),\n/* harmony export */   animated: () => (/* binding */ animated),\n/* harmony export */   config: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.config),\n/* harmony export */   createInterpolator: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.createInterpolator),\n/* harmony export */   easings: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.easings),\n/* harmony export */   inferTo: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.inferTo),\n/* harmony export */   interpolate: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.interpolate),\n/* harmony export */   to: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.to),\n/* harmony export */   update: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.update),\n/* harmony export */   useChain: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useChain),\n/* harmony export */   useInView: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useInView),\n/* harmony export */   useIsomorphicLayoutEffect: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useIsomorphicLayoutEffect),\n/* harmony export */   useReducedMotion: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useReducedMotion),\n/* harmony export */   useResize: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useResize),\n/* harmony export */   useScroll: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useScroll),\n/* harmony export */   useSpring: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpring),\n/* harmony export */   useSpringRef: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringRef),\n/* harmony export */   useSpringValue: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSpringValue),\n/* harmony export */   useSprings: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useSprings),\n/* harmony export */   useTrail: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTrail),\n/* harmony export */   useTransition: () => (/* reexport safe */ _react_spring_core__WEBPACK_IMPORTED_MODULE_0__.useTransition)\n/* harmony export */ });\n/* harmony import */ var _react_spring_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @react-spring/core */ \"(ssr)/../node_modules/@react-spring/core/dist/react-spring_core.modern.mjs\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @react-spring/shared */ \"(ssr)/../node_modules/@react-spring/shared/dist/react-spring_shared.modern.mjs\");\n/* harmony import */ var _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-spring/animated */ \"(ssr)/../node_modules/@react-spring/animated/dist/react-spring_animated.modern.mjs\");\n// src/index.ts\n\n\n\n\n// src/applyAnimatedValues.ts\nvar isCustomPropRE = /^--/;\nfunction dangerousStyleValue(name, value) {\n    if (value == null || typeof value === \"boolean\" || value === \"\") return \"\";\n    if (typeof value === \"number\" && value !== 0 && !isCustomPropRE.test(name) && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) return value + \"px\";\n    return (\"\" + value).trim();\n}\nvar attributeCache = {};\nfunction applyAnimatedValues(instance, props) {\n    if (!instance.nodeType || !instance.setAttribute) {\n        return false;\n    }\n    const isFilterElement = instance.nodeName === \"filter\" || instance.parentNode && instance.parentNode.nodeName === \"filter\";\n    const { style, children, scrollTop, scrollLeft, viewBox, ...attributes } = props;\n    const values = Object.values(attributes);\n    const names = Object.keys(attributes).map((name)=>isFilterElement || instance.hasAttribute(name) ? name : attributeCache[name] || (attributeCache[name] = name.replace(/([A-Z])/g, // Attributes are written in dash case\n        (n)=>\"-\" + n.toLowerCase())));\n    if (children !== void 0) {\n        instance.textContent = children;\n    }\n    for(const name in style){\n        if (style.hasOwnProperty(name)) {\n            const value = dangerousStyleValue(name, style[name]);\n            if (isCustomPropRE.test(name)) {\n                instance.style.setProperty(name, value);\n            } else {\n                instance.style[name] = value;\n            }\n        }\n    }\n    names.forEach((name, i)=>{\n        instance.setAttribute(name, values[i]);\n    });\n    if (scrollTop !== void 0) {\n        instance.scrollTop = scrollTop;\n    }\n    if (scrollLeft !== void 0) {\n        instance.scrollLeft = scrollLeft;\n    }\n    if (viewBox !== void 0) {\n        instance.setAttribute(\"viewBox\", viewBox);\n    }\n}\nvar isUnitlessNumber = {\n    animationIterationCount: true,\n    borderImageOutset: true,\n    borderImageSlice: true,\n    borderImageWidth: true,\n    boxFlex: true,\n    boxFlexGroup: true,\n    boxOrdinalGroup: true,\n    columnCount: true,\n    columns: true,\n    flex: true,\n    flexGrow: true,\n    flexPositive: true,\n    flexShrink: true,\n    flexNegative: true,\n    flexOrder: true,\n    gridRow: true,\n    gridRowEnd: true,\n    gridRowSpan: true,\n    gridRowStart: true,\n    gridColumn: true,\n    gridColumnEnd: true,\n    gridColumnSpan: true,\n    gridColumnStart: true,\n    fontWeight: true,\n    lineClamp: true,\n    lineHeight: true,\n    opacity: true,\n    order: true,\n    orphans: true,\n    tabSize: true,\n    widows: true,\n    zIndex: true,\n    zoom: true,\n    // SVG-related properties\n    fillOpacity: true,\n    floodOpacity: true,\n    stopOpacity: true,\n    strokeDasharray: true,\n    strokeDashoffset: true,\n    strokeMiterlimit: true,\n    strokeOpacity: true,\n    strokeWidth: true\n};\nvar prefixKey = (prefix, key)=>prefix + key.charAt(0).toUpperCase() + key.substring(1);\nvar prefixes = [\n    \"Webkit\",\n    \"Ms\",\n    \"Moz\",\n    \"O\"\n];\nisUnitlessNumber = Object.keys(isUnitlessNumber).reduce((acc, prop)=>{\n    prefixes.forEach((prefix)=>acc[prefixKey(prefix, prop)] = acc[prop]);\n    return acc;\n}, isUnitlessNumber);\n// src/AnimatedStyle.ts\n\n\nvar domTransforms = /^(matrix|translate|scale|rotate|skew)/;\nvar pxTransforms = /^(translate)/;\nvar degTransforms = /^(rotate|skew)/;\nvar addUnit = (value, unit)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) && value !== 0 ? value + unit : value;\nvar isValueIdentity = (value, id)=>_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(value) ? value.every((v)=>isValueIdentity(v, id)) : _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.num(value) ? value === id : parseFloat(value) === id;\nvar AnimatedStyle = class extends _react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.AnimatedObject {\n    constructor({ x, y, z, ...style }){\n        const inputs = [];\n        const transforms = [];\n        if (x || y || z) {\n            inputs.push([\n                x || 0,\n                y || 0,\n                z || 0\n            ]);\n            transforms.push((xyz)=>[\n                    `translate3d(${xyz.map((v)=>addUnit(v, \"px\")).join(\",\")})`,\n                    // prettier-ignore\n                    isValueIdentity(xyz, 0)\n                ]);\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.eachProp)(style, (value, key)=>{\n            if (key === \"transform\") {\n                inputs.push([\n                    value || \"\"\n                ]);\n                transforms.push((transform)=>[\n                        transform,\n                        transform === \"\"\n                    ]);\n            } else if (domTransforms.test(key)) {\n                delete style[key];\n                if (_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.und(value)) return;\n                const unit = pxTransforms.test(key) ? \"px\" : degTransforms.test(key) ? \"deg\" : \"\";\n                inputs.push((0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.toArray)(value));\n                transforms.push(key === \"rotate3d\" ? ([x2, y2, z2, deg])=>[\n                        `rotate3d(${x2},${y2},${z2},${addUnit(deg, unit)})`,\n                        isValueIdentity(deg, 0)\n                    ] : (input)=>[\n                        `${key}(${input.map((v)=>addUnit(v, unit)).join(\",\")})`,\n                        isValueIdentity(input, key.startsWith(\"scale\") ? 1 : 0)\n                    ]);\n            }\n        });\n        if (inputs.length) {\n            style.transform = new FluidTransform(inputs, transforms);\n        }\n        super(style);\n    }\n};\nvar FluidTransform = class extends _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.FluidValue {\n    constructor(inputs, transforms){\n        super();\n        this.inputs = inputs;\n        this.transforms = transforms;\n        this._value = null;\n    }\n    get() {\n        return this._value || (this._value = this._get());\n    }\n    _get() {\n        let transform = \"\";\n        let identity = true;\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input, i)=>{\n            const arg1 = (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue)(input[0]);\n            const [t, id] = this.transforms[i](_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.is.arr(arg1) ? arg1 : input.map(_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.getFluidValue));\n            transform += \" \" + t;\n            identity = identity && id;\n        });\n        return identity ? \"none\" : transform;\n    }\n    // Start observing our inputs once we have an observer.\n    observerAdded(count) {\n        if (count == 1) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.addFluidObserver)(value, this)));\n    }\n    // Stop observing our inputs once we have no observers.\n    observerRemoved(count) {\n        if (count == 0) (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(this.inputs, (input)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.each)(input, (value)=>(0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.hasFluidValue)(value) && (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.removeFluidObserver)(value, this)));\n    }\n    eventObserved(event) {\n        if (event.type == \"change\") {\n            this._value = null;\n        }\n        (0,_react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.callFluidObservers)(this, event);\n    }\n};\n// src/primitives.ts\nvar primitives = [\n    \"a\",\n    \"abbr\",\n    \"address\",\n    \"area\",\n    \"article\",\n    \"aside\",\n    \"audio\",\n    \"b\",\n    \"base\",\n    \"bdi\",\n    \"bdo\",\n    \"big\",\n    \"blockquote\",\n    \"body\",\n    \"br\",\n    \"button\",\n    \"canvas\",\n    \"caption\",\n    \"cite\",\n    \"code\",\n    \"col\",\n    \"colgroup\",\n    \"data\",\n    \"datalist\",\n    \"dd\",\n    \"del\",\n    \"details\",\n    \"dfn\",\n    \"dialog\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"em\",\n    \"embed\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"i\",\n    \"iframe\",\n    \"img\",\n    \"input\",\n    \"ins\",\n    \"kbd\",\n    \"keygen\",\n    \"label\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"map\",\n    \"mark\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"meter\",\n    \"nav\",\n    \"noscript\",\n    \"object\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"output\",\n    \"p\",\n    \"param\",\n    \"picture\",\n    \"pre\",\n    \"progress\",\n    \"q\",\n    \"rp\",\n    \"rt\",\n    \"ruby\",\n    \"s\",\n    \"samp\",\n    \"script\",\n    \"section\",\n    \"select\",\n    \"small\",\n    \"source\",\n    \"span\",\n    \"strong\",\n    \"style\",\n    \"sub\",\n    \"summary\",\n    \"sup\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"textarea\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"time\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"u\",\n    \"ul\",\n    \"var\",\n    \"video\",\n    \"wbr\",\n    // SVG\n    \"circle\",\n    \"clipPath\",\n    \"defs\",\n    \"ellipse\",\n    \"foreignObject\",\n    \"g\",\n    \"image\",\n    \"line\",\n    \"linearGradient\",\n    \"mask\",\n    \"path\",\n    \"pattern\",\n    \"polygon\",\n    \"polyline\",\n    \"radialGradient\",\n    \"rect\",\n    \"stop\",\n    \"svg\",\n    \"text\",\n    \"tspan\"\n];\n// src/index.ts\n\n_react_spring_core__WEBPACK_IMPORTED_MODULE_0__.Globals.assign({\n    batchedUpdates: react_dom__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates,\n    createStringInterpolator: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.createStringInterpolator,\n    colors: _react_spring_shared__WEBPACK_IMPORTED_MODULE_2__.colors\n});\nvar host = (0,_react_spring_animated__WEBPACK_IMPORTED_MODULE_3__.createHost)(primitives, {\n    applyAnimatedValues,\n    createAnimatedStyle: (style)=>new AnimatedStyle(style),\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getComponentProps: ({ scrollTop, scrollLeft, ...props })=>props\n});\nvar animated = host.animated;\n //# sourceMappingURL=react-spring_web.modern.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/@react-spring/web/dist/react-spring_web.modern.mjs\n");

/***/ })

};
;